{
  "language": "Solidity",
  "sources": {
    "Contracts/Store.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\ncontract Store {\r\n\r\n\r\n    uint256 private totalSellers = 0;\r\n    uint256 private totalBuyers = 0;\r\n\r\n\r\n    //----- Structs -----\r\n\r\n    struct Product {\r\n        uint256 ProductID;\r\n        string productName;\r\n        address sellerAddress; // The product object has a sellerAddress reference \r\n        uint256 productPrice; //in wei \r\n        uint256 totalSold;\r\n        bool isExist; //flag to determin whether the product exists TODO: figure out a better way\r\n    }\r\n\r\n    struct Seller {\r\n        address sellerAddress;\r\n        string sellerName;\r\n        uint256 sellerID;\r\n        bool isExist; //flag to determine whether the Seller exists TODO: find a better way\r\n        mapping(uint256 => Product) sellerProducts; //using the productID to obtain the product ; TODO: can we use a string instead?\r\n        uint256 totalProducts;\r\n    }\r\n\r\n    struct Buyer {\r\n        address buyerAddress;\r\n        string buyerName;\r\n        uint256 buyerID; //TODO: figure out the difference between uint and uint256\r\n        bool isExist; //flag to determine whether the buyer exists TODO: figure out a better way\r\n        Product[] purchasedProducts;\r\n    }\r\n\r\n    //----- Mappings -----\r\n\r\n    //Maps user address to Seller or Buyer account structs\r\n    mapping(address => Seller) public sellersList;\r\n    mapping(address => Buyer) public buyersList;\r\n\r\n\r\n\r\n\r\n    // TODO: can we merge this with the object itself?\r\n    // Mapping buyerAddress to array of Products that they bought\r\n    // mapping(address => Product[]) public buyerPurchasedProducts;\r\n\r\n\r\n\r\n\r\n    function createSeller(string memory _sellerName) public {\r\n        require(\r\n            !sellersList[msg.sender].isExist,\r\n            \"Seller with this wallet already exists! \"\r\n        );\r\n        Seller storage newSeller = sellersList[msg.sender]; //get the object\r\n        //set the variables\r\n        newSeller.sellerAddress = msg.sender;\r\n        newSeller.sellerName = _sellerName;\r\n        newSeller.sellerID = ++totalSellers;\r\n        newSeller.isExist = true;\r\n        newSeller.totalProducts = 0;\r\n\r\n        // sellersList[msg.sender] = newSeller;\r\n    }\r\n\r\n    function createBuyer(string memory _buyerName) public {\r\n        require(\r\n            !buyersList[msg.sender].isExist,\r\n            \"Buyer with this wallet already exists! \"\r\n        );\r\n        Buyer storage newBuyer = buyersList[msg.sender]; //get the object\r\n        //set the variables\r\n        newBuyer.buyerAddress = msg.sender;\r\n        newBuyer.buyerName = _buyerName;\r\n        newBuyer.buyerID = ++totalBuyers;\r\n        newBuyer.isExist = true;\r\n        buyersList[msg.sender] = newBuyer; //Is this necessary \r\n\r\n    }\r\n\r\n    function uploadProduct(string memory _productName, uint256 price) public {\r\n        //only the currently connected wallet + must be registered seller can create products\r\n        require(\r\n            sellersList[msg.sender].isExist,\r\n            \"Seller with this wallet does not exists! \"\r\n        );\r\n\r\n        Seller storage currentSeller = sellersList[msg.sender]; //TODO: why is it storage?\r\n\r\n        Product storage newProduct = currentSeller.sellerProducts[\r\n            currentSeller.totalProducts\r\n        ];\r\n\r\n        newProduct.ProductID = ++currentSeller.totalProducts;\r\n        newProduct.productName = _productName;\r\n        newProduct.sellerAddress = msg.sender;\r\n        newProduct.productPrice = price;\r\n        newProduct.totalSold = 0;\r\n        newProduct.isExist = true;\r\n\r\n        currentSeller.sellerProducts[currentSeller.totalProducts] = newProduct;\r\n    }\r\n\r\n    \r\n\r\n\r\n    function purchaseProduct(uint256 productID, address payable sellAddress) public payable{\r\n        require(buyersList[msg.sender].isExist, \"This buyer does not exist!\");\r\n        require(sellersList[sellAddress].sellerProducts[productID].isExist, \"The Product does not exist!\");\r\n        require(msg.value==sellersList[sellAddress].sellerProducts[productID].productPrice, \"Ethers not enough/too much to buy the product!\");\r\n\r\n        //TODO: figure out the gas txn fee \r\n\r\n        (bool callSuccess, ) = sellAddress.call{value: msg.value}(\"\");\r\n        require(callSuccess, \"Failed to send ether\");\r\n\r\n        buyersList[msg.sender].purchasedProducts.push(sellersList[sellAddress].sellerProducts[productID]);\r\n\r\n        sellersList[sellAddress].sellerProducts[productID].totalSold++;\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /* View and Pure Functions */\r\n\r\n    function retrieveTotalBuyers() public view returns (uint256) {\r\n        return totalBuyers;\r\n    }\r\n\r\n    function retrieveTotalSellers() public view returns (uint256) {\r\n        return totalSellers;\r\n    }\r\n\r\n    function viewProductPrice(\r\n        address _sellerAddress,\r\n        uint256 _productID\r\n    ) public view returns (uint256) {\r\n        //check whether the seller exists\r\n        require(\r\n            sellersList[_sellerAddress].isExist,\r\n            \"Seller with this wallet does not exists! \"\r\n        );\r\n        //check whether the product exists\r\n        require(\r\n            sellersList[_sellerAddress].sellerProducts[_productID].isExist,\r\n            \"Seller with this wallet does not exists! \"\r\n        );\r\n        //return the price\r\n        return sellersList[_sellerAddress].sellerProducts[_productID].productPrice;\r\n    }\r\n\r\n\r\n    function viewProductSold(\r\n        address _sellerAddress,\r\n        uint256 _productID\r\n    ) public view returns (uint256) {\r\n        //check whether the seller exists\r\n        require(\r\n            sellersList[_sellerAddress].isExist,\r\n            \"Seller with this wallet does not exists! \"\r\n        );\r\n        //check whether the product exists\r\n        require(\r\n            sellersList[_sellerAddress].sellerProducts[_productID].isExist,\r\n            \"Seller with this wallet does not exists! \"\r\n        );\r\n        //return the price\r\n        return sellersList[_sellerAddress].sellerProducts[_productID].totalSold;\r\n    }\r\n\r\n    function viewProductBought(\r\n        address _buyerAddress,\r\n        uint256 _txnID\r\n    ) public view returns (uint256) {\r\n        //check whether the seller exists\r\n        require(\r\n            buyersList[_buyerAddress].isExist,\r\n            \"Buyer with this wallet does not exists! \"\r\n        );\r\n        //check whether the product exists\r\n        //return the price\r\n        return buyersList[_buyerAddress].purchasedProducts[_txnID].ProductID;\r\n    }\r\n\r\n\r\n}\r\n\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}