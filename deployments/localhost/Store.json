{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyerRating",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timeStamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalProductRating",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReviews",
          "type": "uint256"
        }
      ],
      "name": "buyerReviewEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "buyerName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "buyerID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repScore",
          "type": "uint256"
        }
      ],
      "name": "createBuyerEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "sellerName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellerID",
          "type": "uint256"
        }
      ],
      "name": "createSellerEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "txnID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "purchasedProductsEvent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "productName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "productID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sellerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sellerID",
          "type": "uint256"
        }
      ],
      "name": "uploadProductEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "buyerRating",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "txnID",
          "type": "uint256"
        }
      ],
      "name": "buyerReview",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "buyersList",
      "outputs": [
        {
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "buyerName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "buyerID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "numOfTxn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numOfReviewsGiven",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReviewTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "repScore",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "X_Value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_buyerName",
          "type": "string"
        }
      ],
      "name": "createBuyer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_sellerName",
          "type": "string"
        }
      ],
      "name": "createSeller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "productID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sellerAddress",
          "type": "address"
        }
      ],
      "name": "purchaseProduct",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyerAddress",
          "type": "address"
        }
      ],
      "name": "retrieveBuyerID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "buyerAddress",
          "type": "address"
        }
      ],
      "name": "retrieveBuyerName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellerAddress",
          "type": "address"
        }
      ],
      "name": "retrieveSellerID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellerAddress",
          "type": "address"
        }
      ],
      "name": "retrieveSellerName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellerAddress",
          "type": "address"
        }
      ],
      "name": "retrieveSellerTotalProducts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalBuyers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "retrieveTotalSellers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sellersList",
      "outputs": [
        {
          "internalType": "address",
          "name": "sellerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "sellerName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "sellerID",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isExist",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "totalProducts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRevenue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numOfSales",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_productName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "uploadProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_productID",
          "type": "uint256"
        }
      ],
      "name": "viewProductName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_productID",
          "type": "uint256"
        }
      ],
      "name": "viewProductPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sellerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_productID",
          "type": "uint256"
        }
      ],
      "name": "viewProductReview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_txnID",
          "type": "uint256"
        }
      ],
      "name": "viewTransactions_ProductID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_txnID",
          "type": "uint256"
        }
      ],
      "name": "viewTransactions_Reviewed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyerAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_txnID",
          "type": "uint256"
        }
      ],
      "name": "viewTransactions_SellerID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf5392240335f615b3d163161979f54fc34578c342a732c9d161c83da46ddd841",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "5484021",
    "logsBloom": "0x
    "blockHash": "0xcc56ab337c0ecac2c8b717cca3ef93edc50834ab5449091b7cb1398ac03d3620",
    "transactionHash": "0xf5392240335f615b3d163161979f54fc34578c342a732c9d161c83da46ddd841",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "5484021",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "97158819af11fa42a5223e1c72a7f6a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyerRating\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalProductRating\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReviews\",\"type\":\"uint256\"}],\"name\":\"buyerReviewEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"buyerName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyerID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repScore\",\"type\":\"uint256\"}],\"name\":\"createBuyerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"sellerName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellerID\",\"type\":\"uint256\"}],\"name\":\"createSellerEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"txnID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"purchasedProductsEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"productName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellerID\",\"type\":\"uint256\"}],\"name\":\"uploadProductEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyerRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txnID\",\"type\":\"uint256\"}],\"name\":\"buyerReview\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"buyersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"buyerName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"buyerID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"numOfTxn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfReviewsGiven\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReviewTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"X_Value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_buyerName\",\"type\":\"string\"}],\"name\":\"createBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_sellerName\",\"type\":\"string\"}],\"name\":\"createSeller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"productID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"}],\"name\":\"purchaseProduct\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"}],\"name\":\"retrieveBuyerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"}],\"name\":\"retrieveBuyerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"}],\"name\":\"retrieveSellerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"}],\"name\":\"retrieveSellerName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"}],\"name\":\"retrieveSellerTotalProducts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalBuyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieveTotalSellers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sellersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"sellerName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"sellerID\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isExist\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalProducts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRevenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfSales\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_productName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"uploadProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_productID\",\"type\":\"uint256\"}],\"name\":\"viewProductName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_productID\",\"type\":\"uint256\"}],\"name\":\"viewProductPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sellerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_productID\",\"type\":\"uint256\"}],\"name\":\"viewProductReview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_txnID\",\"type\":\"uint256\"}],\"name\":\"viewTransactions_ProductID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_txnID\",\"type\":\"uint256\"}],\"name\":\"viewTransactions_Reviewed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_txnID\",\"type\":\"uint256\"}],\"name\":\"viewTransactions_SellerID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Contracts/Store.sol\":\"Store\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.8.2 <0.9.0;\\n\\n/**\\n * @title Math\\n * @dev For the mathematical functions required in the project\\n */\\n\\nimport \\\"../node_modules/solady/src/utils/FixedPointMathLib.sol\\\";\\nusing FixedPointMathLib for uint256;\\nusing FixedPointMathLib for int256;\\n\\ncontract Math {\\n    /**\\n     * @dev basic mathematical functions\\n     * All denoted in terms of wad (input and output)\\n     */\\n    function mul(uint256 a, uint256 b) public pure returns (uint256 c) {\\n        c = a.mulWad(b);\\n        return c;\\n    }\\n\\n    function pow0(uint256 a1, uint256 b1) public pure returns (uint256 c) {\\n        //internally convert a and b to int256\\n        int256 a = int256(a1);\\n        int256 b = int256(b1);\\n        c = uint256(a.powWad(b));\\n    }\\n\\n    function div(uint256 a, uint256 b) public pure returns (uint256 c) {\\n        c = a.divWad(b);\\n        return c;\\n    }\\n\\n    function sqrt(uint256 a) public pure returns (uint256 c) {\\n        c = a.sqrtWad();\\n        return c;\\n    }\\n\\n    function add(uint256 a, uint256 b) public pure returns (uint256 c) {\\n        c = uint256(a.rawAdd(b));\\n        require(c >= uint256(a));\\n        return c;\\n    }\\n\\n    //TODO: the overflow condition check\\n    // Follow safemath coding structure\\n    function sub(uint256 a, uint256 b) public pure returns (uint256 c) {\\n        require(b <= a);\\n        c = a.rawSub(b);\\n        return c;\\n    }\\n\\n    function lorn(uint256 a) public pure returns (uint256 c) {\\n        //internally convert\\n        int256 a_int = int256(a);\\n        c = uint256(a_int.lnWad());\\n        return c;\\n    }\\n\\n    /**\\n     * Inputs are in normal Integer Value\\n     * Outputs are in wad\\n     */\\n    function sigmoidalFunc(\\n        uint256 x,\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) public pure returns (uint256 rep) {\\n        //check the 0 condition\\n        if (x == b) {\\n            rep = a * (10 ** 18);\\n            return rep;\\n        }\\n\\n        //convert to fixedpointmathlib format\\n        // x = x * (10 ** 18);\\n        // uint256 a = a_int * (10 ** 18);\\n        // uint256 b = b_int * (10 ** 18);\\n        // uint256 c = c_int * (10 ** 18);\\n\\n        //if x-b is more than 0 do the normal division\\n        if (x > b) {\\n            //1. calculate (x-b) then abs then power\\n            uint256 temp1 = pow0(sub(x, b), 2 * (10 ** 18));\\n\\n            //2. calculate add c then sqrt\\n            uint256 temp2 = sqrt(uint256(add(temp1, c)));\\n\\n            uint256 temp3 = div(uint256(sub(x, b)), temp2);\\n            uint256 temp4 = add(temp3, 1 * (10 ** 18));\\n            rep = mul(temp4, a);\\n            return rep;\\n        } else if (x < b) {\\n            //1. calculate (x-b) then abs then power\\n            uint256 temp1 = pow0(sub(b, x), 2 * (10 ** 18));\\n\\n            //2. calculate add c then sqrt\\n            uint256 temp2 = sqrt(uint256(add(temp1, c)));\\n\\n            uint256 temp3 = div(uint256(sub(b, x)), temp2);\\n            uint256 temp4 = mul(temp3, a);\\n            rep = sub(a, temp4);\\n            return rep;\\n        }\\n    }\\n\\n    function decay(\\n        uint256 timepassed,\\n        uint256 oldX,\\n        uint256 BETA_1\\n    ) public pure returns (uint256 w) {\\n        //Assumes timepassed is in wad\\n        w = mul(pow0(div(BETA_1, 100 * (10 ** 18)), timepassed), oldX);\\n    }\\n\\n    function deltaT(\\n        uint256 delta_T,\\n        uint256 xold,\\n        uint256 b,\\n        uint256 beta2\\n    ) public pure returns (uint256 w1) {\\n        //by default b_int is 12\\n\\n        //check the 0 condition\\n        if (delta_T == b) {\\n            w1 = 0 * (10 ** 18);\\n            return w1;\\n        }\\n\\n        //convert to fixedpointmathlib format\\n        // delta_T = delta_T * (10 ** 18);\\n        // uint256 xold = xold_int * (10 ** 18);\\n        // uint256 b = b_int * (10 ** 18);\\n        // uint256 beta2 = beta2_int * (10 ** 18);\\n\\n        if (delta_T > b) {\\n            //1. calculate (x-b) then abs then power\\n            uint256 temp1 = pow0(sub(delta_T, b), 2 * (10 ** 18));\\n\\n            //2. calculate add c then sqrt\\n            uint256 temp2 = sqrt(uint256(add(temp1, beta2)));\\n\\n            uint256 temp3 = div(uint256(sub(delta_T, b)), temp2);\\n            w1 = mul(temp3, xold);\\n            return w1;\\n        } else if (b > delta_T) {\\n            //1. calculate (x-b) then abs then power\\n            uint256 temp1 = pow0(sub(b, delta_T), 2 * (10 ** 18));\\n\\n            //2. calculate add c then sqrt\\n            uint256 temp2 = sqrt(uint256(add(temp1, beta2)));\\n\\n            uint256 temp3 = div(sub(b, delta_T), temp2);\\n            w1 = mul(temp3, xold);\\n            return w1;\\n        }\\n    }\\n\\n    function lnPrice(\\n        uint256 price,\\n        uint256 xold\\n    ) public pure returns (uint256 w2) {\\n        uint256 priceWad = div(price, 10 ** 18); //convert to decimal places\\n        // uint256 xold = xold_int * (10 ** 18);\\n        priceWad = add(priceWad, 1 * (10 ** 18));\\n        w2 = lorn(priceWad);\\n        w2 = mul(w2, xold);\\n        return w2;\\n    }\\n\\n    function ratingDiff(\\n        uint256 betas_int,\\n        uint256 rincoming_int,\\n        uint256 raverage_int,\\n        uint256 repscore_int,\\n        uint256 xold_int\\n    ) public pure returns (uint256 w1) {\\n        if (rincoming_int > raverage_int) {\\n            uint256 Rdiff = sub(rincoming_int, raverage_int);\\n            uint256 temp1 = div(betas_int, Rdiff);\\n            uint256 temp2 = div(\\n                mul(add(temp1, 1 * (10 ** 18)), repscore_int),\\n                1000 * (10 ** 18)\\n            );\\n            w1 = mul(temp2, xold_int);\\n            return w1;\\n        } else if (rincoming_int < raverage_int) {\\n            uint256 Rdiff = sub(raverage_int, rincoming_int);\\n            uint256 temp1 = div(betas_int, Rdiff);\\n            uint256 temp2 = div(\\n                mul(add(temp1, 1 * (10 ** 18)), repscore_int),\\n                1000 * (10 ** 18)\\n            );\\n            w1 = mul(temp2, xold_int);\\n            return w1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function calculateReview(\\n        uint256 repscore,\\n        uint256 price\\n    ) public pure returns (uint256 reward) {\\n        uint256 priceWad = div(price, 10 ** 18); //convert to decimal places\\n        // 10% of the price multiplied by the reputation score\\n        reward = div(mul(priceWad, repscore), 10 * 10 ** 18);\\n        return reward;\\n    }\\n\\n    function calculateX_Seller(\\n        uint256 oldX,\\n        uint256 rep_score,\\n        uint256 rincoming,\\n        uint256 raverage,\\n        uint256 BETA_S\\n    ) public pure returns (uint256 newX) {\\n        //when storing the oldX, rep_score --> stored in Wad format\\n        //must convert the rincoming, raverage and betas into wad format\\n        newX = add(\\n            oldX,\\n            ratingDiff(\\n                BETA_S * (10 ** 18),\\n                rincoming * (10 ** 18),\\n                raverage * (10 ** 18),\\n                rep_score,\\n                oldX\\n            )\\n        );\\n    }\\n\\n    function sigmoidal_calc(\\n        uint256 A_VALUE,\\n        uint256 B_VALUE,\\n        uint256 C_VALUE,\\n        uint256 newX\\n    ) public pure returns (uint256 rep) {\\n        rep = sigmoidalFunc(\\n            newX,\\n            A_VALUE * (10 ** 18),\\n            B_VALUE * (10 ** 18),\\n            C_VALUE * (10 ** 18)\\n        );\\n    }\\n\\n    function calculateX_Buyer(\\n        uint256 oldX,\\n        uint256 timeFromInActivity,\\n        uint256 price,\\n        uint256 timeFromLastReview,\\n        uint256 BETA_1,\\n        uint256 BETA_2,\\n        uint256 b\\n    ) public pure returns (uint256 newX) {\\n        //when storing the oldX, rep_score --> stored in Wad format\\n        //must convert the timepassed, deltaT, Beta1, Beta2, b and price into wad format\\n        if (timeFromLastReview >= b) {\\n            uint256 temp = add(\\n                decay(\\n                    timeFromInActivity * (10 ** 18),\\n                    oldX,\\n                    BETA_1 * (10 ** 18)\\n                ),\\n                deltaT(\\n                    timeFromLastReview * (10 ** 18),\\n                    oldX,\\n                    b * (10 ** 18),\\n                    BETA_2 * (10 ** 18)\\n                )\\n            );\\n            newX = add(temp, lnPrice(price, oldX));\\n        } else {\\n            uint256 temp = add(\\n                decay(\\n                    timeFromInActivity * (10 ** 18),\\n                    oldX,\\n                    BETA_1 * (10 ** 18)\\n                ),\\n                lnPrice(price, oldX)\\n            );\\n            newX = sub(\\n                temp,\\n                deltaT(\\n                    timeFromLastReview * (10 ** 18),\\n                    oldX,\\n                    b * (10 ** 18),\\n                    BETA_2 * (10 ** 18)\\n                )\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f3aad7c69ff1cc82cbef1f5eabe0597e0435ff2adb243265cf43741ed3a820f\",\"license\":\"GPL-3.0\"},\"Contracts/Store.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.21;\\r\\n\\r\\nimport \\\"./Math.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract Store {\\r\\n    uint256 private totalSellers = 0;\\r\\n    uint256 private totalBuyers = 0;\\r\\n    uint256 private immutable A_VALUE_S = 50;\\r\\n    uint256 private immutable B_VALUE_S = 300;\\r\\n    uint256 private immutable C_VALUE_S = 900;\\r\\n    uint256 private immutable BETA_S = 1;\\r\\n    uint256 private immutable A_VALUE = 50;\\r\\n    uint256 private immutable B_VALUE = 100;\\r\\n    uint256 private immutable C_VALUE = 300;\\r\\n    uint256 private immutable BETA_1 = 99;\\r\\n    uint256 private immutable BETA_2 = 4000;\\r\\n    uint256 private immutable B_TOLERANCE = 12; //hours\\r\\n\\r\\n    Math private MathLib; //importing Token\\r\\n    address private MathLibAddress;\\r\\n    //----- Structs -----\\r\\n\\r\\n    struct Product {\\r\\n        uint256 productID;\\r\\n        string productName;\\r\\n        address sellerAddress; // The product object has a sellerAddress reference\\r\\n        uint256 productPrice; //in wei\\r\\n        uint256 totalSold;\\r\\n        bool isExist; //flag to determin whether the product exists TODO: figure out a better way\\r\\n        uint256 numOfReviewsGiven;\\r\\n        uint256 review;\\r\\n        uint256 X_Value;\\r\\n    }\\r\\n\\r\\n    struct Transaction {\\r\\n        uint256 txnID;\\r\\n        uint256 timeStampBought;\\r\\n        uint256 timeStampReviewed;\\r\\n        uint256 purchasedProductID;\\r\\n        address sellerAddress;\\r\\n        bool reviewed;\\r\\n        bool isExist;\\r\\n    }\\r\\n\\r\\n    struct Seller {\\r\\n        address sellerAddress;\\r\\n        string sellerName;\\r\\n        uint256 sellerID;\\r\\n        bool isExist; //flag to determine whether the Seller exists TODO: find a better way\\r\\n        mapping(uint256 => Product) sellerProducts; //using the productID to obtain the product ; TODO: can we use a string instead?\\r\\n        uint256 totalProducts;\\r\\n        uint256 totalRevenue;\\r\\n        uint256 numOfSales;\\r\\n    }\\r\\n\\r\\n    struct Buyer {\\r\\n        address buyerAddress;\\r\\n        string buyerName;\\r\\n        uint256 buyerID; //TODO: figure out the difference between uint and uint256\\r\\n        bool isExist; //flag to determine whether the buyer exists TODO: figure out a better way\\r\\n        mapping(uint256 => Transaction) txnMade;\\r\\n        uint256 numOfTxn;\\r\\n        uint256 numOfReviewsGiven;\\r\\n        uint256 lastReviewTime;\\r\\n        uint256 repScore;\\r\\n        uint256 X_Value;\\r\\n    }\\r\\n\\r\\n    //----- Mappings -----\\r\\n\\r\\n    //Maps user address to Seller or Buyer account structs\\r\\n    // TODO: can we merge this with the object itself?\\r\\n    // Mapping buyerAddress to array of Products that they bought\\r\\n    // mapping(address => Product[]) public buyerPurchasedProducts;\\r\\n\\r\\n    mapping(address => Seller) public sellersList;\\r\\n    mapping(address => Buyer) public buyersList;\\r\\n\\r\\n    //-----Events -----\\r\\n    event createSellerEvent(\\r\\n        string sellerName,\\r\\n        address sellerAddress,\\r\\n        uint256 sellerID\\r\\n    );\\r\\n\\r\\n    event createBuyerEvent(\\r\\n        string buyerName,\\r\\n        address buyerAddress,\\r\\n        uint256 buyerID,\\r\\n        uint256 repScore\\r\\n    );\\r\\n\\r\\n    event uploadProductEvent(\\r\\n        string productName,\\r\\n        uint256 price,\\r\\n        uint256 productID,\\r\\n        address sellerAddress,\\r\\n        uint256 sellerID\\r\\n    );\\r\\n\\r\\n    event purchasedProductsEvent(\\r\\n        uint256 txnID,\\r\\n        uint256 productID,\\r\\n        address sellerAddress,\\r\\n        address buyerAddress,\\r\\n        uint256 price\\r\\n    );\\r\\n\\r\\n    event buyerReviewEvent(\\r\\n        uint256 productID,\\r\\n        address sellerAddress,\\r\\n        address buyerAddress,\\r\\n        uint256 buyerRating,\\r\\n        uint256 timeStamp,\\r\\n        uint256 finalProductRating,\\r\\n        uint256 totalReviews\\r\\n    );\\r\\n\\r\\n    /* Constructor to deploy the math library */\\r\\n    constructor() {\\r\\n        MathLib = new Math();\\r\\n        MathLibAddress = address(MathLib);\\r\\n    }\\r\\n\\r\\n    function createSeller(string memory _sellerName) public {\\r\\n        require(\\r\\n            !sellersList[msg.sender].isExist,\\r\\n            \\\"Seller with this wallet already exists!\\\"\\r\\n        );\\r\\n        Seller storage newSeller = sellersList[msg.sender]; //get the object\\r\\n        //set the variables\\r\\n        newSeller.sellerAddress = msg.sender;\\r\\n        newSeller.sellerName = _sellerName;\\r\\n        newSeller.sellerID = ++totalSellers; //TODO: convert to wad\\r\\n        newSeller.isExist = true;\\r\\n        newSeller.totalProducts = 0;\\r\\n        newSeller.totalRevenue = 0;\\r\\n        newSeller.numOfSales = 0;\\r\\n\\r\\n        // sellersList[msg.sender] = newSeller;\\r\\n        emit createSellerEvent(\\r\\n            newSeller.sellerName,\\r\\n            newSeller.sellerAddress,\\r\\n            newSeller.sellerID\\r\\n        );\\r\\n\\r\\n        console.log(\\\"Seller Created at:\\\", msg.sender);\\r\\n    }\\r\\n\\r\\n    function createBuyer(string memory _buyerName) public {\\r\\n        require(\\r\\n            !buyersList[msg.sender].isExist,\\r\\n            \\\"Buyer with this wallet already exists!\\\"\\r\\n        );\\r\\n        Buyer storage newBuyer = buyersList[msg.sender]; //get the object\\r\\n        //set the variables\\r\\n        newBuyer.buyerAddress = msg.sender;\\r\\n        newBuyer.buyerName = _buyerName;\\r\\n        newBuyer.buyerID = ++totalBuyers; //TODO: convert to wad\\r\\n        newBuyer.isExist = true;\\r\\n        newBuyer.numOfReviewsGiven = 0;\\r\\n        newBuyer.numOfTxn = 0;\\r\\n        newBuyer.X_Value = 1 * (10 ** 18);\\r\\n        newBuyer.repScore = 0;\\r\\n        newBuyer.lastReviewTime = block.timestamp;\\r\\n\\r\\n        emit createBuyerEvent(\\r\\n            newBuyer.buyerName,\\r\\n            newBuyer.buyerAddress,\\r\\n            newBuyer.buyerID,\\r\\n            newBuyer.repScore\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function uploadProduct(string memory _productName, uint256 price) public {\\r\\n        //only the currently connected wallet + must be registered seller can create products\\r\\n        require(\\r\\n            sellersList[msg.sender].isExist,\\r\\n            \\\"Seller with this wallet does not exists!\\\"\\r\\n        );\\r\\n\\r\\n        Seller storage currentSeller = sellersList[msg.sender]; //TODO: why is it storage?\\r\\n\\r\\n        Product storage newProduct = currentSeller.sellerProducts[\\r\\n            ++currentSeller.totalProducts\\r\\n        ];\\r\\n\\r\\n        newProduct.productID = currentSeller.totalProducts;\\r\\n        newProduct.productName = _productName;\\r\\n        newProduct.sellerAddress = msg.sender;\\r\\n        newProduct.productPrice = price;\\r\\n        newProduct.totalSold = 0;\\r\\n        newProduct.review = 0;\\r\\n        newProduct.X_Value = 1 * (10 ** 18);\\r\\n        newProduct.isExist = true;\\r\\n\\r\\n        currentSeller.sellerProducts[currentSeller.totalProducts] = newProduct;\\r\\n\\r\\n        emit uploadProductEvent(\\r\\n            newProduct.productName,\\r\\n            newProduct.productPrice,\\r\\n            newProduct.productID,\\r\\n            newProduct.sellerAddress,\\r\\n            currentSeller.sellerID\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function purchaseProduct(\\r\\n        uint256 productID,\\r\\n        address sellerAddress\\r\\n    ) public payable{\\r\\n        require(buyersList[msg.sender].isExist, \\\"This buyer does not exist!\\\");\\r\\n        require(\\r\\n            sellersList[sellerAddress].sellerProducts[productID].isExist,\\r\\n            \\\"The Product does not exist!\\\"\\r\\n        );\\r\\n        require(\\r\\n            msg.value ==\\r\\n                sellersList[sellerAddress]\\r\\n                    .sellerProducts[productID]\\r\\n                    .productPrice,\\r\\n            \\\"Ethers not enough/too much to buy the product!\\\"\\r\\n        );\\r\\n\\r\\n        (bool callSuccess, ) = (payable(sellerAddress)).call{value: msg.value}(\\r\\n            \\\"\\\"\\r\\n        );\\r\\n        require(callSuccess, \\\"Failed to send ether\\\");\\r\\n\\r\\n        uint256 txnID = ++buyersList[msg.sender].numOfTxn;\\r\\n\\r\\n        Transaction storage newTxn = buyersList[msg.sender].txnMade[txnID];\\r\\n        newTxn.txnID = txnID;\\r\\n        newTxn.timeStampBought = block.timestamp;\\r\\n        newTxn.purchasedProductID = productID;\\r\\n        newTxn.sellerAddress = sellerAddress;\\r\\n        newTxn.reviewed = false;\\r\\n        newTxn.isExist = true;\\r\\n        buyersList[msg.sender].txnMade[txnID] = newTxn;\\r\\n\\r\\n        sellersList[sellerAddress].sellerProducts[productID].totalSold++;\\r\\n        sellersList[sellerAddress].totalRevenue += msg.value;\\r\\n        sellersList[sellerAddress].numOfSales += 1;\\r\\n\\r\\n        emit purchasedProductsEvent(\\r\\n            txnID,\\r\\n            productID,\\r\\n            sellerAddress,\\r\\n            msg.sender,\\r\\n            sellersList[sellerAddress].sellerProducts[productID].productPrice\\r\\n        );\\r\\n\\r\\n    }\\r\\n\\r\\n    function buyerReview(uint256 buyerRating, uint256 txnID) public {\\r\\n        require(buyersList[msg.sender].isExist, \\\"This buyer does not exist!\\\");\\r\\n\\r\\n        require(\\r\\n            buyersList[msg.sender].txnMade[txnID].isExist,\\r\\n            \\\"Buyer does not have this transaction ID!\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            buyersList[msg.sender].txnMade[txnID].reviewed == false,\\r\\n            \\\"Buyer already reviewed this transaction ID!\\\"\\r\\n        );\\r\\n\\r\\n        address sellerAddress = buyersList[msg.sender]\\r\\n            .txnMade[txnID]\\r\\n            .sellerAddress;\\r\\n\\r\\n        uint256 productID = buyersList[msg.sender]\\r\\n            .txnMade[txnID]\\r\\n            .purchasedProductID;\\r\\n\\r\\n        uint256 price = sellersList[sellerAddress]\\r\\n            .sellerProducts[productID]\\r\\n            .productPrice;\\r\\n\\r\\n        /*\\r\\n        For testing purposes, a time lapse of 1 minute is made to become 1 hour \\r\\n        60 seconds --> divide by 60 --> 1 min \\r\\n        12min is 12 hours\\r\\n        13 min is 13 hours \\r\\n        */\\r\\n        uint256 timepassed = (block.timestamp -\\r\\n            buyersList[msg.sender].lastReviewTime) / 60; //convert seconds to minutes then to hours\\r\\n\\r\\n        uint256 lastReviewTime = 0;\\r\\n        for (uint256 i = buyersList[msg.sender].numOfTxn; i >= 1; i--) {\\r\\n            if (\\r\\n                buyersList[msg.sender].txnMade[txnID].sellerAddress ==\\r\\n                sellerAddress &&\\r\\n                buyersList[msg.sender].txnMade[txnID].purchasedProductID ==\\r\\n                productID &&\\r\\n                buyersList[msg.sender].txnMade[txnID].reviewed\\r\\n            ) {\\r\\n                lastReviewTime = buyersList[msg.sender]\\r\\n                    .txnMade[txnID]\\r\\n                    .timeStampReviewed;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (lastReviewTime == 0) {\\r\\n            //means the buyer has never reviewed the product before\\r\\n            //add weightage of 0\\r\\n            lastReviewTime = B_TOLERANCE;\\r\\n        } else {\\r\\n            //convert to hours\\r\\n            /*\\r\\n            For testing purposes, a time lapse of 1 minute is made to become 1 hour \\r\\n            60 seconds --> divide by 60 --> 1 min \\r\\n            12min is 12 hours\\r\\n            13 min is 13 hours \\r\\n            */\\r\\n            lastReviewTime = (block.timestamp - lastReviewTime) / 60;\\r\\n        }\\r\\n\\r\\n        //update XValue and Reputation Score of Buyers\\r\\n        buyersList[msg.sender].X_Value = calculateXValue_Buyer(\\r\\n            buyersList[msg.sender].X_Value,\\r\\n            timepassed,\\r\\n            price,\\r\\n            lastReviewTime\\r\\n        );\\r\\n        buyersList[msg.sender].repScore = calculateRepScore_Buyer(\\r\\n            buyersList[msg.sender].X_Value\\r\\n        );\\r\\n\\r\\n        //Update X value and Reputation score of sellers\\r\\n        sellersList[sellerAddress]\\r\\n            .sellerProducts[productID]\\r\\n            .X_Value = calculateXValue_Product(\\r\\n            sellersList[sellerAddress].sellerProducts[productID].X_Value,\\r\\n            buyersList[msg.sender].repScore,\\r\\n            buyerRating,\\r\\n            sellersList[sellerAddress].sellerProducts[productID].review\\r\\n        );\\r\\n        sellersList[sellerAddress]\\r\\n            .sellerProducts[productID]\\r\\n            .review = calculateReview_Product(\\r\\n            sellersList[sellerAddress].sellerProducts[productID].X_Value\\r\\n        );\\r\\n\\r\\n        sellersList[sellerAddress]\\r\\n            .sellerProducts[productID]\\r\\n            .numOfReviewsGiven++;\\r\\n\\r\\n        buyersList[msg.sender].txnMade[txnID].reviewed = true;\\r\\n        buyersList[msg.sender].txnMade[txnID].timeStampReviewed = block\\r\\n            .timestamp;\\r\\n\\r\\n        emit buyerReviewEvent(\\r\\n            productID,\\r\\n            sellerAddress,\\r\\n            msg.sender,\\r\\n            buyerRating,\\r\\n            block.timestamp,\\r\\n            sellersList[sellerAddress].sellerProducts[productID].review,\\r\\n            sellersList[sellerAddress]\\r\\n                .sellerProducts[productID]\\r\\n                .numOfReviewsGiven\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /* Calculation of reputation scores, review scores and incentive*/\\r\\n\\r\\n    // function calculateIncentive(uint256 repscore, uint256 price) private{\\r\\n    //     uint256 reward = MathLib.calculateReview(repscore, price); //this is in wei\\r\\n\\r\\n    // }\\r\\n\\r\\n    function calculateXValue_Product(\\r\\n        uint256 oldX,\\r\\n        uint256 repScore,\\r\\n        uint256 rincoming,\\r\\n        uint256 raverage\\r\\n    ) private view returns (uint256 newX) {\\r\\n        newX = MathLib.calculateX_Seller(\\r\\n            oldX,\\r\\n            repScore,\\r\\n            rincoming,\\r\\n            raverage,\\r\\n            BETA_S\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function calculateReview_Product(\\r\\n        uint256 newX\\r\\n    ) private view returns (uint256 rating) {\\r\\n        rating = MathLib.sigmoidal_calc(A_VALUE_S, B_VALUE_S, C_VALUE_S, newX);\\r\\n        return rating;\\r\\n    }\\r\\n\\r\\n    function calculateXValue_Buyer(\\r\\n        uint256 oldX,\\r\\n        uint256 timeFromInActivity,\\r\\n        uint256 price,\\r\\n        uint256 timeFromLastReview\\r\\n    ) private view returns (uint256 newX) {\\r\\n        //in days\\r\\n        if (timeFromInActivity > 16 * 24) {\\r\\n            timeFromInActivity = 16;\\r\\n        } else {\\r\\n            timeFromInActivity = timeFromInActivity / 24; //convert to days\\r\\n        }\\r\\n\\r\\n        newX = MathLib.calculateX_Buyer(\\r\\n            oldX,\\r\\n            timeFromInActivity,\\r\\n            price,\\r\\n            timeFromLastReview,\\r\\n            BETA_1,\\r\\n            BETA_2,\\r\\n            B_TOLERANCE\\r\\n        );\\r\\n\\r\\n        return newX;\\r\\n    }\\r\\n\\r\\n    function calculateRepScore_Buyer(\\r\\n        uint256 newX\\r\\n    ) private view returns (uint256 rep) {\\r\\n        rep = MathLib.sigmoidal_calc(A_VALUE, B_VALUE, C_VALUE, newX);\\r\\n\\r\\n        return rep;\\r\\n    }\\r\\n\\r\\n    /* View and Pure Functions */\\r\\n\\r\\n    function retrieveTotalBuyers() public view returns (uint256) {\\r\\n        return totalBuyers;\\r\\n    }\\r\\n\\r\\n    function retrieveTotalSellers() public view returns (uint256) {\\r\\n        return totalSellers;\\r\\n    }\\r\\n\\r\\n    function retrieveSellerID(\\r\\n        address _sellerAddress\\r\\n    ) public view returns (uint256) {\\r\\n        require(\\r\\n            sellersList[_sellerAddress].isExist,\\r\\n            \\\"Seller with this wallet does not exists! \\\"\\r\\n        );\\r\\n        return sellersList[_sellerAddress].sellerID;\\r\\n    }\\r\\n\\r\\n    function retrieveSellerName(\\r\\n        address _sellerAddress\\r\\n    ) public view returns (string memory) {\\r\\n        require(\\r\\n            sellersList[_sellerAddress].isExist,\\r\\n            \\\"Seller with this wallet does not exists! \\\"\\r\\n        );\\r\\n        return sellersList[_sellerAddress].sellerName;\\r\\n    }\\r\\n\\r\\n    function retrieveSellerTotalProducts(\\r\\n        address _sellerAddress\\r\\n    ) public view returns (uint256) {\\r\\n        require(\\r\\n            sellersList[_sellerAddress].isExist,\\r\\n            \\\"Seller with this wallet does not exists! \\\"\\r\\n        );\\r\\n        return sellersList[_sellerAddress].totalProducts;\\r\\n    }\\r\\n\\r\\n    function retrieveBuyerID(\\r\\n        address _buyerAddress\\r\\n    ) public view returns (uint256) {\\r\\n        require(\\r\\n            buyersList[_buyerAddress].isExist,\\r\\n            \\\"Buyer with this wallet does not exists! \\\"\\r\\n        );\\r\\n        return buyersList[_buyerAddress].buyerID;\\r\\n    }\\r\\n\\r\\n    function retrieveBuyerName(\\r\\n        address buyerAddress\\r\\n    ) public view returns (string memory) {\\r\\n        return buyersList[buyerAddress].buyerName;\\r\\n    }\\r\\n\\r\\n    function viewProductPrice(\\r\\n        address _sellerAddress,\\r\\n        uint256 _productID\\r\\n    ) public view returns (uint256) {\\r\\n        //check whether the seller exists\\r\\n        require(\\r\\n            sellersList[_sellerAddress].isExist,\\r\\n            \\\"Seller with this wallet does not exists! \\\"\\r\\n        );\\r\\n        //check whether the product exists\\r\\n        require(\\r\\n            sellersList[_sellerAddress].sellerProducts[_productID].isExist,\\r\\n            \\\"Seller with this product does not exists! \\\"\\r\\n        );\\r\\n        //return the price\\r\\n        return\\r\\n            sellersList[_sellerAddress].sellerProducts[_productID].productPrice;\\r\\n    }\\r\\n\\r\\n    function viewProductName(\\r\\n        address _sellerAddress,\\r\\n        uint256 _productID\\r\\n    ) public view returns (string memory) {\\r\\n        //check whether the seller exists\\r\\n        require(\\r\\n            sellersList[_sellerAddress].isExist,\\r\\n            \\\"Seller with this wallet does not exists! \\\"\\r\\n        );\\r\\n        //check whether the product exists\\r\\n        require(\\r\\n            sellersList[_sellerAddress].sellerProducts[_productID].isExist,\\r\\n            \\\"ProductID in the seller does not exists! \\\"\\r\\n        );\\r\\n        //return the price\\r\\n        return\\r\\n            sellersList[_sellerAddress].sellerProducts[_productID].productName;\\r\\n    }\\r\\n\\r\\n    function viewProductReview(\\r\\n        address _sellerAddress,\\r\\n        uint256 _productID\\r\\n    ) public view returns (uint256) {\\r\\n        //check whether the seller exists\\r\\n        require(\\r\\n            sellersList[_sellerAddress].isExist,\\r\\n            \\\"Seller with this wallet does not exists! \\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            sellersList[_sellerAddress].sellerProducts[_productID].isExist,\\r\\n            \\\"ProductID in the seller does not exists! \\\"\\r\\n        );\\r\\n        //check whether the product exists\\r\\n        //return the price\\r\\n        return sellersList[_sellerAddress].sellerProducts[_productID].review;\\r\\n    }\\r\\n\\r\\n    function viewTransactions_ProductID(\\r\\n        address _buyerAddress,\\r\\n        uint256 _txnID\\r\\n    ) public view returns (uint256) {\\r\\n        require(\\r\\n            buyersList[_buyerAddress].isExist,\\r\\n            \\\"Buyer with this wallet does not exists! \\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            buyersList[_buyerAddress].txnMade[_txnID].isExist,\\r\\n            \\\"Txn ID in the seller does not exists! \\\"\\r\\n        );\\r\\n        //check whether the product exists\\r\\n        //return the price\\r\\n        return buyersList[_buyerAddress].txnMade[_txnID].purchasedProductID;\\r\\n    }\\r\\n\\r\\n    function viewTransactions_Reviewed(\\r\\n        address _buyerAddress,\\r\\n        uint256 _txnID\\r\\n    ) public view returns (bool) {\\r\\n        require(\\r\\n            buyersList[_buyerAddress].isExist,\\r\\n            \\\"Buyer with this wallet does not exists! \\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            buyersList[_buyerAddress].txnMade[_txnID].isExist,\\r\\n            \\\"Txn ID in the seller does not exists! \\\"\\r\\n        );\\r\\n        //check whether the product exists\\r\\n        //return the price\\r\\n        return buyersList[_buyerAddress].txnMade[_txnID].reviewed;\\r\\n    }\\r\\n\\r\\n    function viewTransactions_SellerID(\\r\\n        address _buyerAddress,\\r\\n        uint256 _txnID\\r\\n    ) public view returns (uint256) {\\r\\n        require(\\r\\n            buyersList[_buyerAddress].isExist,\\r\\n            \\\"Buyer with this wallet does not exists! \\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            buyersList[_buyerAddress].txnMade[_txnID].isExist,\\r\\n            \\\"Txn ID in the seller does not exists! \\\"\\r\\n        );\\r\\n        //check whether the product exists\\r\\n        //return the price\\r\\n\\r\\n        address sellerAddress = buyersList[_buyerAddress]\\r\\n            .txnMade[_txnID]\\r\\n            .sellerAddress;\\r\\n\\r\\n        uint256 sellerID = sellersList[sellerAddress].sellerID;\\r\\n\\r\\n        return sellerID;\\r\\n    }\\r\\n\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0xbc0a3290ddf4e0d3afb652c7871253ab02d56595129c2de47954478d61947755\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"node_modules/solady/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error ExpOverflow();\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error FactorialOverflow();\\n\\n    /// @dev The operation failed, due to an overflow.\\n    error RPowOverflow();\\n\\n    /// @dev The mantissa is too big to fit.\\n    error MantissaOverflow();\\n\\n    /// @dev The operation failed, due to an multiplication overflow.\\n    error MulWadFailed();\\n\\n    /// @dev The operation failed, due to an multiplication overflow.\\n    error SMulWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error DivWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error SDivWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error MulDivFailed();\\n\\n    /// @dev The division failed, as the denominator is zero.\\n    error DivFailed();\\n\\n    /// @dev The full precision multiply-divide operation failed, either due\\n    /// to the result being larger than 256 bits, or a division by a zero.\\n    error FullMulDivFailed();\\n\\n    /// @dev The output is undefined, as the input is less-than-or-equal to zero.\\n    error LnWadUndefined();\\n\\n    /// @dev The input outside the acceptable domain.\\n    error OutOfDomain();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The scalar of ETH and most ERC20s.\\n    uint256 internal constant WAD = 1e18;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*              SIMPLIFIED FIXED POINT OPERATIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down.\\n    function mulWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if mul(y, gt(x, div(not(0), y))) {\\n                mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down.\\n    function sMulWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, y)\\n            // Equivalent to `require((x == 0 || z / x == y) && !(x == -1 && y == type(int256).min))`.\\n            if iszero(gt(or(iszero(x), eq(sdiv(z, x), y)), lt(not(x), eq(y, shl(255, 1))))) {\\n                mstore(0x00, 0xedcd4dd4) // `SMulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := sdiv(z, WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down, but without overflow checks.\\n    function rawMulWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down, but without overflow checks.\\n    function rawSMulWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded up.\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if mul(y, gt(x, div(not(0), y))) {\\n                mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded up, but without overflow checks.\\n    function rawMulWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down.\\n    function divWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && (WAD == 0 || x <= type(uint256).max / WAD))`.\\n            if iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))) {\\n                mstore(0x00, 0x7c5f487d) // `DivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down.\\n    function sDivWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, WAD)\\n            // Equivalent to `require(y != 0 && ((x * WAD) / WAD == x))`.\\n            if iszero(and(iszero(iszero(y)), eq(sdiv(z, WAD), x))) {\\n                mstore(0x00, 0x5c43740d) // `SDivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := sdiv(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down, but without overflow and divide by zero checks.\\n    function rawDivWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down, but without overflow and divide by zero checks.\\n    function rawSDivWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded up.\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && (WAD == 0 || x <= type(uint256).max / WAD))`.\\n            if iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))) {\\n                mstore(0x00, 0x7c5f487d) // `DivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, WAD), y))), div(mul(x, WAD), y))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded up, but without overflow and divide by zero checks.\\n    function rawDivWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(iszero(iszero(mod(mul(x, WAD), y))), div(mul(x, WAD), y))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `x` to the power of `y`.\\n    /// because `x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)`.\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Using `ln(x)` means `x` must be greater than 0.\\n        return expWad((lnWad(x) * y) / int256(WAD));\\n    }\\n\\n    /// @dev Returns `exp(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is less than 0.5 we return zero.\\n            // This happens when `x <= (log(1e-18) * 1e18) ~ -4.15e19`.\\n            if (x <= -41446531673892822313) return r;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // When the result is greater than `(2**255 - 1) / 1e18` we can not represent it as\\n                // an int. This happens when `x >= floor(log((2**255 - 1) / 1e18) * 1e18) \\u2248 135`.\\n                if iszero(slt(x, 135305999368893231589)) {\\n                    mstore(0x00, 0xa37bfec9) // `ExpOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n\\n            // `x` is now in the range `(-42, 136) * 1e18`. Convert to `(-42, 136) * 2**96`\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5 ** 18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2 ** 95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // `k` is in the range `[-61, 195]`.\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // `p` is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already `2**96` too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range `(0.09, 0.25) * 2**96`.\\n\\n            // We now need to multiply r by:\\n            // - The scale factor `s \\u2248 6.031367120`.\\n            // - The `2**k` factor from the range reduction.\\n            // - The `1e18 / 2**96` factor for base conversion.\\n            // We do this all at once, with an intermediate result in `2**213`\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256(\\n                (uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k)\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We want to convert `x` from `10**18` fixed point to `2**96` fixed point.\\n            // We do this by multiplying by `2**96 / 10**18`. But since\\n            // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n            // and add `ln(2**96 / 10**18)` at the end.\\n\\n            // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`.\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // We place the check here for more optimal stack operations.\\n            if iszero(sgt(x, 0)) {\\n                mstore(0x00, 0x1615e638) // `LnWadUndefined()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // forgefmt: disable-next-item\\n            r := xor(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff))\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x := shr(159, shl(r, x))\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // `p` is made monic, we will multiply by a scale factor later.\\n            // forgefmt: disable-next-item\\n            let p := sub( // This heavily nested expression is to avoid stack-too-deep for via-ir.\\n                sar(96, mul(add(43456485725739037958740375743393,\\n                sar(96, mul(add(24828157081833163892658089445524,\\n                sar(96, mul(add(3273285459638523848632254066296,\\n                    x), x))), x))), x)), 11111509109440967052023855526967)\\n            p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n            p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n            p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n            // `q` is monic by convention.\\n            let q := add(5573035233440673466300451813936, x)\\n            q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n            q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n            q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n            q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n            q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n            q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n            // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n            // Finalization, we need to:\\n            // - Multiply by the scale factor `s = 5.549\\u2026`.\\n            // - Add `ln(2**96 / 10**18)`.\\n            // - Add `k * ln(2)`.\\n            // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already `2**96` too large.\\n            p := sdiv(p, q)\\n            // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`.\\n            p := mul(1677202110996718588342820967067443963516166, p)\\n            // Add `ln(2) * k * 5**18 * 2**192`.\\n            // forgefmt: disable-next-item\\n            p := add(mul(16597577552685614221487285958193947469193820559219878177908093499208371, sub(159, r)), p)\\n            // Add `ln(2**96 / 10**18) * 5**18 * 2**192`.\\n            p := add(600920179829731861736702779321621459595472258049074101567377883020018308, p)\\n            // Base conversion: mul `2**18 / 2**192`.\\n            r := sar(174, p)\\n        }\\n    }\\n\\n    /// @dev Returns `W_0(x)`, denominated in `WAD`.\\n    /// See: https://en.wikipedia.org/wiki/Lambert_W_function\\n    /// a.k.a. Product log function. This is an approximation of the principal branch.\\n    function lambertW0Wad(int256 x) internal pure returns (int256 w) {\\n        // forgefmt: disable-next-item\\n        unchecked {\\n            if ((w = x) <= -367879441171442322) revert OutOfDomain(); // `x` less than `-1/e`.\\n            int256 wad = int256(WAD);\\n            int256 p = x;\\n            uint256 c; // Whether we need to avoid catastrophic cancellation.\\n            uint256 i = 4; // Number of iterations.\\n            if (w <= 0x1ffffffffffff) {\\n                if (-0x4000000000000 <= w) {\\n                    i = 1; // Inputs near zero only take one step to converge.\\n                } else if (w <= -0x3ffffffffffffff) {\\n                    i = 32; // Inputs near `-1/e` take very long to converge.\\n                }\\n            } else if (w >> 63 == 0) {\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    // Inline log2 for more performance, since the range is small.\\n                    let v := shr(49, w)\\n                    let l := shl(3, lt(0xff, v))\\n                    l := add(or(l, byte(and(0x1f, shr(shr(l, v), 0x8421084210842108cc6318c6db6d54be)),\\n                        0x0706060506020504060203020504030106050205030304010505030400000000)), 49)\\n                    w := sdiv(shl(l, 7), byte(sub(l, 31), 0x0303030303030303040506080c13))\\n                    c := gt(l, 60)\\n                    i := add(2, add(gt(l, 53), c))\\n                }\\n            } else {\\n                int256 ll = lnWad(w = lnWad(w));\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    // `w = ln(x) - ln(ln(x)) + b * ln(ln(x)) / ln(x)`.\\n                    w := add(sdiv(mul(ll, 1023715080943847266), w), sub(w, ll))\\n                    i := add(3, iszero(shr(68, x)))\\n                    c := iszero(shr(143, x))\\n                }\\n                if (c == 0) {\\n                    do { // If `x` is big, use Newton's so that intermediate values won't overflow.\\n                        int256 e = expWad(w);\\n                        /// @solidity memory-safe-assembly\\n                        assembly {\\n                            let t := mul(w, div(e, wad))\\n                            w := sub(w, sdiv(sub(t, x), div(add(e, t), wad)))\\n                        }\\n                        if (p <= w) break;\\n                        p = w;\\n                    } while (--i != 0);\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        w := sub(w, sgt(w, 2))\\n                    }\\n                    return w;\\n                }\\n            }\\n            do { // Otherwise, use Halley's for faster convergence.\\n                int256 e = expWad(w);\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let t := add(w, wad)\\n                    let s := sub(mul(w, e), mul(x, wad))\\n                    w := sub(w, sdiv(mul(s, wad), sub(mul(e, t), sdiv(mul(add(t, wad), s), add(t, t)))))\\n                }\\n                if (p <= w) break;\\n                p = w;\\n            } while (--i != c);\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                w := sub(w, sgt(w, 2))\\n            }\\n            // For certain ranges of `x`, we'll use the quadratic-rate recursive formula of\\n            // R. Iacono and J.P. Boyd for the last iteration, to avoid catastrophic cancellation.\\n            if (c != 0) {\\n                int256 t = w | 1;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    x := sdiv(mul(x, wad), t)\\n                }\\n                x = (t * (wad + lnWad(x)));\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    w := sdiv(x, add(wad, t))\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  GENERAL NUMBER UTILITIES                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/21/muldiv\\n    function fullMulDiv(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                // 512-bit multiply `[p1 p0] = x * y`.\\n                // Compute the product mod `2**256` and mod `2**256 - 1`\\n                // then use the Chinese Remainder Theorem to reconstruct\\n                // the 512 bit result. The result is stored in two 256\\n                // variables such that `product = p1 * 2**256 + p0`.\\n\\n                // Least significant 256 bits of the product.\\n                result := mul(x, y) // Temporarily use `result` as `p0` to save gas.\\n                let mm := mulmod(x, y, not(0))\\n                // Most significant 256 bits of the product.\\n                let p1 := sub(mm, add(result, lt(mm, result)))\\n\\n                // Handle non-overflow cases, 256 by 256 division.\\n                if iszero(p1) {\\n                    if iszero(d) {\\n                        mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                    result := div(result, d)\\n                    break\\n                }\\n\\n                // Make sure the result is less than `2**256`. Also prevents `d == 0`.\\n                if iszero(gt(d, p1)) {\\n                    mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n\\n                /*------------------- 512 by 256 division --------------------*/\\n\\n                // Make division exact by subtracting the remainder from `[p1 p0]`.\\n                // Compute remainder using mulmod.\\n                let r := mulmod(x, y, d)\\n                // `t` is the least significant bit of `d`.\\n                // Always greater or equal to 1.\\n                let t := and(d, sub(0, d))\\n                // Divide `d` by `t`, which is a power of two.\\n                d := div(d, t)\\n                // Invert `d mod 2**256`\\n                // Now that `d` is an odd number, it has an inverse\\n                // modulo `2**256` such that `d * inv = 1 mod 2**256`.\\n                // Compute the inverse by starting with a seed that is correct\\n                // correct for four bits. That is, `d * inv = 1 mod 2**4`.\\n                let inv := xor(2, mul(3, d))\\n                // Now use Newton-Raphson iteration to improve the precision.\\n                // Thanks to Hensel's lifting lemma, this also works in modular\\n                // arithmetic, doubling the correct bits in each step.\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**8\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**16\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**32\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**64\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**128\\n                result :=\\n                    mul(\\n                        // Divide [p1 p0] by the factors of two.\\n                        // Shift in bits from `p1` into `p0`. For this we need\\n                        // to flip `t` such that it is `2**256 / t`.\\n                        or(\\n                            mul(sub(p1, gt(r, result)), add(div(sub(0, t), t), 1)),\\n                            div(sub(result, r), t)\\n                        ),\\n                        // inverse mod 2**256\\n                        mul(inv, sub(2, mul(d, inv)))\\n                    )\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision, rounded up.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Uniswap-v3-core under MIT license:\\n    /// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/FullMath.sol\\n    function fullMulDivUp(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 result) {\\n        result = fullMulDiv(x, y, d);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mulmod(x, y, d) {\\n                result := add(result, 1)\\n                if iszero(result) {\\n                    mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `floor(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDiv(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(d != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(d, iszero(mul(y, gt(x, div(not(0), y)))))) {\\n                mstore(0x00, 0xad251c27) // `MulDivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, y), d)\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDivUp(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(d != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(d, iszero(mul(y, gt(x, div(not(0), y)))))) {\\n                mstore(0x00, 0xad251c27) // `MulDivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, y), d))), div(mul(x, y), d))\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x / d)`.\\n    /// Reverts if `d` is zero.\\n    function divUp(uint256 x, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(d) {\\n                mstore(0x00, 0x65244e4e) // `DivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(x, d))), div(x, d))\\n        }\\n    }\\n\\n    /// @dev Returns `max(0, x - y)`.\\n    function zeroFloorSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(gt(x, y), sub(x, y))\\n        }\\n    }\\n\\n    /// @dev Exponentiate `x` to `y` by squaring, denominated in base `b`.\\n    /// Reverts if the computation overflows.\\n    function rpow(uint256 x, uint256 y, uint256 b) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(b, iszero(y)) // `0 ** 0 = 1`. Otherwise, `0 ** n = 0`.\\n            if x {\\n                z := xor(b, mul(xor(b, x), and(y, 1))) // `z = isEven(y) ? scale : x`\\n                let half := shr(1, b) // Divide `b` by 2.\\n                // Divide `y` by 2 every iteration.\\n                for { y := shr(1, y) } y { y := shr(1, y) } {\\n                    let xx := mul(x, x) // Store x squared.\\n                    let xxRound := add(xx, half) // Round to the nearest number.\\n                    // Revert if `xx + half` overflowed, or if `x ** 2` overflows.\\n                    if or(lt(xxRound, xx), shr(128, x)) {\\n                        mstore(0x00, 0x49f7642b) // `RPowOverflow()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                    x := div(xxRound, b) // Set `x` to scaled `xxRound`.\\n                    // If `y` is odd:\\n                    if and(y, 1) {\\n                        let zx := mul(z, x) // Compute `z * x`.\\n                        let zxRound := add(zx, half) // Round to the nearest number.\\n                        // If `z * x` overflowed or `zx + half` overflowed:\\n                        if or(xor(div(zx, x), z), lt(zxRound, zx)) {\\n                            // Revert if `x` is non-zero.\\n                            if iszero(iszero(x)) {\\n                                mstore(0x00, 0x49f7642b) // `RPowOverflow()`.\\n                                revert(0x1c, 0x04)\\n                            }\\n                        }\\n                        z := div(zxRound, b) // Return properly scaled `zxRound`.\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the square root of `x`.\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `floor(sqrt(2**15)) = 181`. `sqrt(2**15) - 181 = 2.84`.\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // Let `y = x / 2**r`. We check `y >= 2**(k + 8)`\\n            // but shift right by `k` bits to ensure that if `x >= 256`, then `y >= 256`.\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffffff, shr(r, x))))\\n            z := shl(shr(1, r), z)\\n\\n            // Goal was to get `z*z*y` within a small factor of `x`. More iterations could\\n            // get y in a tighter range. Currently, we will have y in `[256, 256*(2**16))`.\\n            // We ensured `y >= 256` so that the relative difference between `y` and `y+1` is small.\\n            // That's not possible if `x < 256` but we can just verify those cases exhaustively.\\n\\n            // Now, `z*z*y <= x < z*z*(y+1)`, and `y <= 2**(16+8)`, and either `y >= 256`, or `x < 256`.\\n            // Correctness can be checked exhaustively for `x < 256`, so we assume `y >= 256`.\\n            // Then `z*sqrt(y)` is within `sqrt(257)/sqrt(256)` of `sqrt(x)`, or about 20bps.\\n\\n            // For `s` in the range `[1/256, 256]`, the estimate `f(s) = (181/1024) * (s+1)`\\n            // is in the range `(1/2.84 * sqrt(s), 2.84 * sqrt(s))`,\\n            // with largest error when `s = 1` and when `s = 256` or `1/256`.\\n\\n            // Since `y` is in `[256, 256*(2**16))`, let `a = y/65536`, so that `a` is in `[1/256, 256)`.\\n            // Then we can estimate `sqrt(y)` using\\n            // `sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2**18`.\\n\\n            // There is no overflow risk here since `y < 2**136` after the first branch above.\\n            z := shr(18, mul(z, add(shr(r, x), 65536))) // A `mul()` is saved from starting `z` at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If `x+1` is a perfect square, the Babylonian method cycles between\\n            // `floor(sqrt(x))` and `ceil(sqrt(x))`. This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    /// @dev Returns the cube root of `x`.\\n    /// Credit to bout3fiddy and pcaversaccio under AGPLv3 license:\\n    /// https://github.com/pcaversaccio/snekmate/blob/main/src/utils/Math.vy\\n    function cbrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n\\n            z := div(shl(div(r, 3), shl(lt(0xf, shr(r, x)), 0xf)), xor(7, mod(r, 3)))\\n\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n\\n            z := sub(z, lt(div(x, mul(z, z)), z))\\n        }\\n    }\\n\\n    /// @dev Returns the square root of `x`, denominated in `WAD`.\\n    function sqrtWad(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = 10 ** 9;\\n            if (x <= type(uint256).max / 10 ** 36 - 1) {\\n                x *= 10 ** 18;\\n                z = 1;\\n            }\\n            z *= sqrt(x);\\n        }\\n    }\\n\\n    /// @dev Returns the cube root of `x`, denominated in `WAD`.\\n    function cbrtWad(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = 10 ** 12;\\n            if (x <= (type(uint256).max / 10 ** 36) * 10 ** 18 - 1) {\\n                if (x >= type(uint256).max / 10 ** 36) {\\n                    x *= 10 ** 18;\\n                    z = 10 ** 6;\\n                } else {\\n                    x *= 10 ** 36;\\n                    z = 1;\\n                }\\n            }\\n            z *= cbrt(x);\\n        }\\n    }\\n\\n    /// @dev Returns the factorial of `x`.\\n    function factorial(uint256 x) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(lt(x, 58)) {\\n                mstore(0x00, 0xaba0f2a2) // `FactorialOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            for { result := 1 } x { x := sub(x, 1) } { result := mul(result, x) }\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`.\\n    /// Equivalent to computing the index of the most significant bit (MSB) of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0x0706060506020504060203020504030106050205030304010505030400000000))\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log2Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log2(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(shl(r, 1), x))\\n        }\\n    }\\n\\n    /// @dev Returns the log10 of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log10(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(lt(x, 100000000000000000000000000000000000000)) {\\n                x := div(x, 100000000000000000000000000000000000000)\\n                r := 38\\n            }\\n            if iszero(lt(x, 100000000000000000000)) {\\n                x := div(x, 100000000000000000000)\\n                r := add(r, 20)\\n            }\\n            if iszero(lt(x, 10000000000)) {\\n                x := div(x, 10000000000)\\n                r := add(r, 10)\\n            }\\n            if iszero(lt(x, 100000)) {\\n                x := div(x, 100000)\\n                r := add(r, 5)\\n            }\\n            r := add(r, add(gt(x, 9), add(gt(x, 99), add(gt(x, 999), gt(x, 9999)))))\\n        }\\n    }\\n\\n    /// @dev Returns the log10 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log10Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log10(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(exp(10, r), x))\\n        }\\n    }\\n\\n    /// @dev Returns the log256 of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(shr(3, r), lt(0xff, shr(r, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the log256 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log256Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log256(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(shl(shl(3, r), 1), x))\\n        }\\n    }\\n\\n    /// @dev Returns the scientific notation format `mantissa * 10 ** exponent` of `x`.\\n    /// Useful for compressing prices (e.g. using 25 bit mantissa and 7 bit exponent).\\n    function sci(uint256 x) internal pure returns (uint256 mantissa, uint256 exponent) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mantissa := x\\n            if mantissa {\\n                if iszero(mod(mantissa, 1000000000000000000000000000000000)) {\\n                    mantissa := div(mantissa, 1000000000000000000000000000000000)\\n                    exponent := 33\\n                }\\n                if iszero(mod(mantissa, 10000000000000000000)) {\\n                    mantissa := div(mantissa, 10000000000000000000)\\n                    exponent := add(exponent, 19)\\n                }\\n                if iszero(mod(mantissa, 1000000000000)) {\\n                    mantissa := div(mantissa, 1000000000000)\\n                    exponent := add(exponent, 12)\\n                }\\n                if iszero(mod(mantissa, 1000000)) {\\n                    mantissa := div(mantissa, 1000000)\\n                    exponent := add(exponent, 6)\\n                }\\n                if iszero(mod(mantissa, 10000)) {\\n                    mantissa := div(mantissa, 10000)\\n                    exponent := add(exponent, 4)\\n                }\\n                if iszero(mod(mantissa, 100)) {\\n                    mantissa := div(mantissa, 100)\\n                    exponent := add(exponent, 2)\\n                }\\n                if iszero(mod(mantissa, 10)) {\\n                    mantissa := div(mantissa, 10)\\n                    exponent := add(exponent, 1)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Convenience function for packing `x` into a smaller number using `sci`.\\n    /// The `mantissa` will be in bits [7..255] (the upper 249 bits).\\n    /// The `exponent` will be in bits [0..6] (the lower 7 bits).\\n    /// Use `SafeCastLib` to safely ensure that the `packed` number is small\\n    /// enough to fit in the desired unsigned integer type:\\n    /// ```\\n    ///     uint32 packed = SafeCastLib.toUint32(FixedPointMathLib.packSci(777 ether));\\n    /// ```\\n    function packSci(uint256 x) internal pure returns (uint256 packed) {\\n        (x, packed) = sci(x); // Reuse for `mantissa` and `exponent`.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if shr(249, x) {\\n                mstore(0x00, 0xce30380c) // `MantissaOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            packed := or(shl(7, x), packed)\\n        }\\n    }\\n\\n    /// @dev Convenience function for unpacking a packed number from `packSci`.\\n    function unpackSci(uint256 packed) internal pure returns (uint256 unpacked) {\\n        unchecked {\\n            unpacked = (packed >> 7) * 10 ** (packed & 0x7f);\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = (x & y) + ((x ^ y) >> 1);\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`.\\n    function avg(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = (x >> 1) + (y >> 1) + (((x & 1) + (y & 1)) >> 1);\\n        }\\n    }\\n\\n    /// @dev Returns the absolute value of `x`.\\n    function abs(int256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(sub(0, shr(255, x)), add(sub(0, shr(255, x)), x))\\n        }\\n    }\\n\\n    /// @dev Returns the absolute distance between `x` and `y`.\\n    function dist(int256 x, int256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(mul(xor(sub(y, x), sub(x, y)), sgt(x, y)), sub(y, x))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), lt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), slt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), gt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), sgt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(uint256 x, uint256 minValue, uint256 maxValue)\\n        internal\\n        pure\\n        returns (uint256 z)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, minValue), gt(minValue, x)))\\n            z := xor(z, mul(xor(z, maxValue), lt(maxValue, z)))\\n        }\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(int256 x, int256 minValue, int256 maxValue) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, minValue), sgt(minValue, x)))\\n            z := xor(z, mul(xor(z, maxValue), slt(maxValue, z)))\\n        }\\n    }\\n\\n    /// @dev Returns greatest common divisor of `x` and `y`.\\n    function gcd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { z := x } y {} {\\n                let t := y\\n                y := mod(z, y)\\n                z := t\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RAW NUMBER OPERATIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawSDiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawSMod(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := smod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `(x + y) % d`, return 0 if `d` if zero.\\n    function rawAddMod(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := addmod(x, y, d)\\n        }\\n    }\\n\\n    /// @dev Returns `(x * y) % d`, return 0 if `d` if zero.\\n    function rawMulMod(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mulmod(x, y, d)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ee0e95a9266f45e2b56e7000d4f094ae96132f7f5dbc9fe3b27867f43f8cc3a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101c0604052600080556000600155603260809081525061012c60a09081525061038460c090815250600160e09081525060326101009081525060646101209081525061012c61014090815250606361016090815250610fa061018090815250600c6101a0908152503480156200007557600080fd5b5060405162000084906200014b565b604051809103906000f080158015620000a1573d6000803e3d6000fd5b50600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000159565b6115558062004da983390190565b60805160a05160c05160e05161010051610120516101405161016051610180516101a051614bcd620001dc6000396000818161147901526130b90152600061309801526000613077015260006131c9015260006131a80152600061318701526000613296015260006133a401526000613383015260006133620152614bcd6000f3fe60806040526004361061011f5760003560e01c806388b62b6a116100a0578063ce4580c911610064578063ce4580c914610477578063db582783146104b4578063eacbdb34146104f1578063f881f0001461051a578063fb1a1790146105365761011f565b806388b62b6a146103525780639a7ff3f21461038f5780639f40f362146103b8578063bba97d76146103f5578063cc6c41e6146104325761011f565b806359fa878e116100e757806359fa878e1461024757806363abd5cf146102845780637a0039ba146102ad5780637fd67647146102ea5780638042659e146103155761011f565b806312f524e01461012457806316415a02146101615780633d1c1c53146101a45780634c5d2c8b146101cd578063561cf7f51461020a575b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906135bf565b610561565b604051610158919061360e565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190613629565b6106f4565b60405161019b9796959493929190613710565b60405180910390f35b3480156101b057600080fd5b506101cb60048036038101906101c691906138bb565b6107eb565b005b3480156101d957600080fd5b506101f460048036038101906101ef91906135bf565b610b13565b604051610201919061360e565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190613629565b610d14565b60405161023e919061360e565b60405180910390f35b34801561025357600080fd5b5061026e60048036038101906102699190613629565b610def565b60405161027b919061360e565b60405180910390f35b34801561029057600080fd5b506102ab60048036038101906102a69190613917565b610eca565b005b3480156102b957600080fd5b506102d460048036038101906102cf91906135bf565b611a1a565b6040516102e19190613957565b60405180910390f35b3480156102f657600080fd5b506102ff611bba565b60405161030c919061360e565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190613629565b611bc4565b6040516103499190613972565b60405180910390f35b34801561035e57600080fd5b5061037960048036038101906103749190613629565b611d27565b604051610386919061360e565b60405180910390f35b34801561039b57600080fd5b506103b660048036038101906103b19190613994565b611e02565b005b3480156103c457600080fd5b506103df60048036038101906103da91906135bf565b61202a565b6040516103ec9190613972565b60405180910390f35b34801561040157600080fd5b5061041c60048036038101906104179190613629565b612245565b6040516104299190613972565b60405180910390f35b34801561043e57600080fd5b5061045960048036038101906104549190613629565b612319565b60405161046e999897969594939291906139dd565b60405180910390f35b34801561048357600080fd5b5061049e600480360381019061049991906135bf565b61241c565b6040516104ab919061360e565b60405180910390f35b3480156104c057600080fd5b506104db60048036038101906104d691906135bf565b6125af565b6040516104e8919061360e565b60405180910390f35b3480156104fd57600080fd5b5061051860048036038101906105139190613994565b612742565b005b610534600480360381019061052f9190613a71565b61294c565b005b34801561054257600080fd5b5061054b613005565b604051610558919061360e565b60405180910390f35b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e990613b23565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060050160009054906101000a900460ff16610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c90613bb5565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060030154905092915050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461073d90613c04565b80601f016020809104026020016040519081016040528092919081815260200182805461076990613c04565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff16908060050154908060060154908060070154905087565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1661087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190613ca7565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600401600083600501600081546108d690613cf6565b91905081905581526020019081526020016000209050816005015481600001819055508381600101908161090a9190613eea565b50338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508281600301819055506000816004018190555060008160070181905550670de0b6b3a7640000816008018190555060018160050160006101000a81548160ff021916908315150217905550808260040160008460050154815260200190815260200160002060008201548160000155600182018160010190816109d19190613fd2565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506006820154816006015560078201548160070155600882015481600801559050507f827f91e7f4fbb905bd650f742c7af7b1b989f3eb56bb80e8faf09038583b72ef81600101826003015483600001548460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660020154604051610b0595949392919061413e565b60405180910390a150505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b9061420a565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160159054906101000a900460ff16610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e9061429c565b60405180910390fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600084815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050809250505092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9c90613b23565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e779061420a565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5090614308565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600082815260200190815260200160002060040160159054906101000a900460ff16610ffc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff39061439a565b60405180910390fd5b60001515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160149054906101000a900460ff161515146110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d9061442c565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008481526020019081526020016000206003015490506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008381526020019081526020016000206003015490506000603c600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007015442611229919061444c565b61123391906144af565b9050600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015490505b6001811061146e578573ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600089815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561138c575084600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600089815260200190815260200160002060030154145b80156113f85750600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600088815260200190815260200160002060040160149054906101000a900460ff165b1561145b57600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600088815260200190815260200160002060020154915061146e565b8080611466906144e0565b91505061127e565b506000810361149f577f000000000000000000000000000000000000000000000000000000000000000090506114ba565b603c81426114ad919061444c565b6114b791906144af565b90505b611508600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206009015483858461300e565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090181905550611599600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090154613145565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801819055506116d9600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060080154600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008015489600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600089815260200190815260200160002060070154613250565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060080181905550611792600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060080154613320565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060070181905550600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000858152602001908152602001600020600601600081548092919061185390613cf6565b91905055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600088815260200190815260200160002060040160146101000a81548160ff02191690831515021790555042600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000888152602001908152602001600020600201819055507fc8eace918d73b100093f09590ebd3bd2e45fcbe6f7faf08b0a90855ea61edf858486338a42600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008b815260200190815260200160002060070154600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008c815260200190815260200160002060060154604051611a099796959493929190614509565b60405180910390a150505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa29061420a565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160159054906101000a900460ff16611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b459061429c565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160149054906101000a900460ff16905092915050565b6000600154905090565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4c90613b23565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054611ca290613c04565b80601f0160208091040260200160405190810160405280929190818152602001828054611cce90613c04565b8015611d1b5780601f10611cf057610100808354040283529160200191611d1b565b820191906000526020600020905b815481529060010190602001808311611cfe57829003601f168201915b50505050509050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daf90613b23565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050919050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615611e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e89906145ea565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081816001019081611f299190613eea565b506000808154611f3890613cf6565b919050819055816002018190555060018160030160006101000a81548160ff0219169083151502179055506000816005018190555060008160060181905550600081600701819055507f2daf7e02bff4313b1e326e8f126cffd3ff7c437229109ce78a53951ac8d70638816001018260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020154604051611fdf9392919061460a565b60405180910390a16120266040518060400160405280601281526020017f53656c6c657220437265617465642061743a00000000000000000000000000008152503361342b565b5050565b6060600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166120bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b290613b23565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060050160009054906101000a900460ff1661215e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612155906146ba565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060010180546121bf90613c04565b80601f01602080910402602001604051908101604052809291908181526020018280546121eb90613c04565b80156122385780601f1061220d57610100808354040283529160200191612238565b820191906000526020600020905b81548152906001019060200180831161221b57829003601f168201915b5050505050905092915050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805461229490613c04565b80601f01602080910402602001604051908101604052809291908181526020018280546122c090613c04565b801561230d5780601f106122e25761010080835404028352916020019161230d565b820191906000526020600020905b8154815290600101906020018083116122f057829003601f168201915b50505050509050919050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461236290613c04565b80601f016020809104026020016040519081016040528092919081815260200182805461238e90613c04565b80156123db5780601f106123b0576101008083540402835291602001916123db565b820191906000526020600020905b8154815290600101906020018083116123be57829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff16908060050154908060060154908060070154908060080154908060090154905089565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166124ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a49061420a565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160159054906101000a900460ff16612550576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125479061429c565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060030154905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16612640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263790613b23565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060050160009054906101000a900460ff166126e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126da906146ba565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060070154905092915050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16156127d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127c99061474c565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160010190816128699190613eea565b5060016000815461287990613cf6565b919050819055816002018190555060018160030160006101000a81548160ff0219169083151502179055506000816006018190555060008160050181905550670de0b6b3a76400008160090181905550600081600801819055504281600701819055507f72d8d6c2563f662f27728e50439bc8ace9286edca723199ecc8b1e68b5f3c16a816001018260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600201548460080154604051612940949392919061476c565b60405180910390a15050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166129db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d290614308565b60405180910390fd5b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060050160009054906101000a900460ff16612a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7590614804565b60405180910390fd5b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000838152602001908152602001600020600301543414612b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0d90614896565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1634604051612b3c906148e7565b60006040518083038185875af1925050503d8060008114612b79576040519150601f19603f3d011682016040523d82523d6000602084013e612b7e565b606091505b5050905080612bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bb990614948565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008154612c1390613cf6565b91905081905590506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008381526020019081526020016000209050818160000181905550428160010181905550848160030181905550838160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160040160146101000a81548160ff02191690831515021790555060018160040160156101000a81548160ff02191690831515021790555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000848152602001908152602001600020600082015481600001556001820154816001015560028201548160020155600382015481600301556004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004820160149054906101000a900460ff168160040160146101000a81548160ff0219169083151502179055506004820160159054906101000a900460ff168160040160156101000a81548160ff021916908315150217905550905050600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008681526020019081526020016000206004016000815480929190612eb190613cf6565b919050555034600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006016000828254612f089190614968565b925050819055506001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007016000828254612f629190614968565b925050819055507f2a87cec993d23d666d1bf9abb68302d6a2d20ba6a5287439294d1050d92f094282868633600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008b815260200190815260200160002060030154604051612ff695949392919061499c565b60405180910390a15050505050565b60008054905090565b60006101808411156130235760109350613033565b60188461303091906144af565b93505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339288c9b868686867f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518863ffffffff1660e01b81526004016130fa97969594939291906149ef565b602060405180830381865afa158015613117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313b9190614a73565b9050949350505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397d67bff7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000866040518563ffffffff1660e01b81526004016132089493929190614aa0565b602060405180830381865afa158015613225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132499190614a73565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348590bf1868686867f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016132d5959493929190614ae5565b602060405180830381865afa1580156132f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133169190614a73565b9050949350505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397d67bff7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000866040518563ffffffff1660e01b81526004016133e39493929190614aa0565b602060405180830381865afa158015613400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134249190614a73565b9050919050565b6134c38282604051602401613441929190614b38565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506134c7565b5050565b6134de816134d66134e1613502565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b61350d819050919050565b613515614b68565b565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135568261352b565b9050919050565b6135668161354b565b811461357157600080fd5b50565b6000813590506135838161355d565b92915050565b6000819050919050565b61359c81613589565b81146135a757600080fd5b50565b6000813590506135b981613593565b92915050565b600080604083850312156135d6576135d5613521565b5b60006135e485828601613574565b92505060206135f5858286016135aa565b9150509250929050565b61360881613589565b82525050565b600060208201905061362360008301846135ff565b92915050565b60006020828403121561363f5761363e613521565b5b600061364d84828501613574565b91505092915050565b61365f8161354b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561369f578082015181840152602081019050613684565b60008484015250505050565b6000601f19601f8301169050919050565b60006136c782613665565b6136d18185613670565b93506136e1818560208601613681565b6136ea816136ab565b840191505092915050565b60008115159050919050565b61370a816136f5565b82525050565b600060e082019050613725600083018a613656565b818103602083015261373781896136bc565b905061374660408301886135ff565b6137536060830187613701565b61376060808301866135ff565b61376d60a08301856135ff565b61377a60c08301846135ff565b98975050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6137c8826136ab565b810181811067ffffffffffffffff821117156137e7576137e6613790565b5b80604052505050565b60006137fa613517565b905061380682826137bf565b919050565b600067ffffffffffffffff82111561382657613825613790565b5b61382f826136ab565b9050602081019050919050565b82818337600083830152505050565b600061385e6138598461380b565b6137f0565b90508281526020810184848401111561387a5761387961378b565b5b61388584828561383c565b509392505050565b600082601f8301126138a2576138a1613786565b5b81356138b284826020860161384b565b91505092915050565b600080604083850312156138d2576138d1613521565b5b600083013567ffffffffffffffff8111156138f0576138ef613526565b5b6138fc8582860161388d565b925050602061390d858286016135aa565b9150509250929050565b6000806040838503121561392e5761392d613521565b5b600061393c858286016135aa565b925050602061394d858286016135aa565b9150509250929050565b600060208201905061396c6000830184613701565b92915050565b6000602082019050818103600083015261398c81846136bc565b905092915050565b6000602082840312156139aa576139a9613521565b5b600082013567ffffffffffffffff8111156139c8576139c7613526565b5b6139d48482850161388d565b91505092915050565b6000610120820190506139f3600083018c613656565b8181036020830152613a05818b6136bc565b9050613a14604083018a6135ff565b613a216060830189613701565b613a2e60808301886135ff565b613a3b60a08301876135ff565b613a4860c08301866135ff565b613a5560e08301856135ff565b613a636101008301846135ff565b9a9950505050505050505050565b60008060408385031215613a8857613a87613521565b5b6000613a96858286016135aa565b9250506020613aa785828601613574565b9150509250929050565b7f53656c6c6572207769746820746869732077616c6c657420646f6573206e6f7460008201527f2065786973747321200000000000000000000000000000000000000000000000602082015250565b6000613b0d602983613670565b9150613b1882613ab1565b604082019050919050565b60006020820190508181036000830152613b3c81613b00565b9050919050565b7f53656c6c6572207769746820746869732070726f6475637420646f6573206e6f60008201527f7420657869737473212000000000000000000000000000000000000000000000602082015250565b6000613b9f602a83613670565b9150613baa82613b43565b604082019050919050565b60006020820190508181036000830152613bce81613b92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613c1c57607f821691505b602082108103613c2f57613c2e613bd5565b5b50919050565b7f53656c6c6572207769746820746869732077616c6c657420646f6573206e6f7460008201527f2065786973747321000000000000000000000000000000000000000000000000602082015250565b6000613c91602883613670565b9150613c9c82613c35565b604082019050919050565b60006020820190508181036000830152613cc081613c84565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d0182613589565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d3357613d32613cc7565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613da07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d63565b613daa8683613d63565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613de7613de2613ddd84613589565b613dc2565b613589565b9050919050565b6000819050919050565b613e0183613dcc565b613e15613e0d82613dee565b848454613d70565b825550505050565b600090565b613e2a613e1d565b613e35818484613df8565b505050565b5b81811015613e5957613e4e600082613e22565b600181019050613e3b565b5050565b601f821115613e9e57613e6f81613d3e565b613e7884613d53565b81016020851015613e87578190505b613e9b613e9385613d53565b830182613e3a565b50505b505050565b600082821c905092915050565b6000613ec160001984600802613ea3565b1980831691505092915050565b6000613eda8383613eb0565b9150826002028217905092915050565b613ef382613665565b67ffffffffffffffff811115613f0c57613f0b613790565b5b613f168254613c04565b613f21828285613e5d565b600060209050601f831160018114613f545760008415613f42578287015190505b613f4c8582613ece565b865550613fb4565b601f198416613f6286613d3e565b60005b82811015613f8a57848901518255600182019150602085019450602081019050613f65565b86831015613fa75784890151613fa3601f891682613eb0565b8355505b6001600288020188555050505b505050505050565b600081549050613fcb81613c04565b9050919050565b818103613fe05750506140b8565b613fe982613fbc565b67ffffffffffffffff81111561400257614001613790565b5b61400c8254613c04565b614017828285613e5d565b6000601f8311600181146140465760008415614034578287015490505b61403e8582613ece565b8655506140b1565b601f19841661405487613d3e565b965061405f86613d3e565b60005b8281101561408757848901548255600182019150600185019450602081019050614062565b868310156140a457848901546140a0601f891682613eb0565b8355505b6001600288020188555050505b5050505050505b565b600081546140c781613c04565b6140d18186613670565b945060018216600081146140ec576001811461410257614135565b60ff198316865281151560200286019350614135565b61410b85613d3e565b60005b8381101561412d5781548189015260018201915060208101905061410e565b808801955050505b50505092915050565b600060a082019050818103600083015261415881886140ba565b905061416760208301876135ff565b61417460408301866135ff565b6141816060830185613656565b61418e60808301846135ff565b9695505050505050565b7f4275796572207769746820746869732077616c6c657420646f6573206e6f742060008201527f6578697374732120000000000000000000000000000000000000000000000000602082015250565b60006141f4602883613670565b91506141ff82614198565b604082019050919050565b60006020820190508181036000830152614223816141e7565b9050919050565b7f54786e20494420696e207468652073656c6c657220646f6573206e6f7420657860008201527f6973747321200000000000000000000000000000000000000000000000000000602082015250565b6000614286602683613670565b91506142918261422a565b604082019050919050565b600060208201905081810360008301526142b581614279565b9050919050565b7f5468697320627579657220646f6573206e6f7420657869737421000000000000600082015250565b60006142f2601a83613670565b91506142fd826142bc565b602082019050919050565b60006020820190508181036000830152614321816142e5565b9050919050565b7f427579657220646f6573206e6f7420686176652074686973207472616e73616360008201527f74696f6e20494421000000000000000000000000000000000000000000000000602082015250565b6000614384602883613670565b915061438f82614328565b604082019050919050565b600060208201905081810360008301526143b381614377565b9050919050565b7f427579657220616c72656164792072657669657765642074686973207472616e60008201527f73616374696f6e20494421000000000000000000000000000000000000000000602082015250565b6000614416602b83613670565b9150614421826143ba565b604082019050919050565b6000602082019050818103600083015261444581614409565b9050919050565b600061445782613589565b915061446283613589565b925082820390508181111561447a57614479613cc7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006144ba82613589565b91506144c583613589565b9250826144d5576144d4614480565b5b828204905092915050565b60006144eb82613589565b9150600082036144fe576144fd613cc7565b5b600182039050919050565b600060e08201905061451e600083018a6135ff565b61452b6020830189613656565b6145386040830188613656565b61454560608301876135ff565b61455260808301866135ff565b61455f60a08301856135ff565b61456c60c08301846135ff565b98975050505050505050565b7f53656c6c6572207769746820746869732077616c6c657420616c72656164792060008201527f6578697374732100000000000000000000000000000000000000000000000000602082015250565b60006145d4602783613670565b91506145df82614578565b604082019050919050565b60006020820190508181036000830152614603816145c7565b9050919050565b6000606082019050818103600083015261462481866140ba565b90506146336020830185613656565b61464060408301846135ff565b949350505050565b7f50726f64756374494420696e207468652073656c6c657220646f6573206e6f7460008201527f2065786973747321200000000000000000000000000000000000000000000000602082015250565b60006146a4602983613670565b91506146af82614648565b604082019050919050565b600060208201905081810360008301526146d381614697565b9050919050565b7f4275796572207769746820746869732077616c6c657420616c7265616479206560008201527f7869737473210000000000000000000000000000000000000000000000000000602082015250565b6000614736602683613670565b9150614741826146da565b604082019050919050565b6000602082019050818103600083015261476581614729565b9050919050565b6000608082019050818103600083015261478681876140ba565b90506147956020830186613656565b6147a260408301856135ff565b6147af60608301846135ff565b95945050505050565b7f5468652050726f6475637420646f6573206e6f74206578697374210000000000600082015250565b60006147ee601b83613670565b91506147f9826147b8565b602082019050919050565b6000602082019050818103600083015261481d816147e1565b9050919050565b7f457468657273206e6f7420656e6f7567682f746f6f206d75636820746f20627560008201527f79207468652070726f6475637421000000000000000000000000000000000000602082015250565b6000614880602e83613670565b915061488b82614824565b604082019050919050565b600060208201905081810360008301526148af81614873565b9050919050565b600081905092915050565b50565b60006148d16000836148b6565b91506148dc826148c1565b600082019050919050565b60006148f2826148c4565b9150819050919050565b7f4661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000614932601483613670565b915061493d826148fc565b602082019050919050565b6000602082019050818103600083015261496181614925565b9050919050565b600061497382613589565b915061497e83613589565b925082820190508082111561499657614995613cc7565b5b92915050565b600060a0820190506149b160008301886135ff565b6149be60208301876135ff565b6149cb6040830186613656565b6149d86060830185613656565b6149e560808301846135ff565b9695505050505050565b600060e082019050614a04600083018a6135ff565b614a1160208301896135ff565b614a1e60408301886135ff565b614a2b60608301876135ff565b614a3860808301866135ff565b614a4560a08301856135ff565b614a5260c08301846135ff565b98975050505050505050565b600081519050614a6d81613593565b92915050565b600060208284031215614a8957614a88613521565b5b6000614a9784828501614a5e565b91505092915050565b6000608082019050614ab560008301876135ff565b614ac260208301866135ff565b614acf60408301856135ff565b614adc60608301846135ff565b95945050505050565b600060a082019050614afa60008301886135ff565b614b0760208301876135ff565b614b1460408301866135ff565b614b2160608301856135ff565b614b2e60808301846135ff565b9695505050505050565b60006040820190508181036000830152614b5281856136bc565b9050614b616020830184613656565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220f9961f918d3bfc956e32cde97b635f1eb5f28e0f0ab4ce749739efe9c5a37f5864736f6c63430008150033608060405234801561001057600080fd5b50611535806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637081c39c11610097578063b67d77c511610066578063b67d77c514610345578063b71d55d614610375578063c8a4ac9c146103a5578063fd57aafa146103d557610100565b80637081c39c14610285578063771602f7146102b557806397d67bff146102e5578063a391c15b1461031557610100565b806339288c9b116100d357806339288c9b146101c557806339cd63eb146101f557806348590bf114610225578063677342ce1461025557610100565b806302345e051461010557806303d0cea014610135578063071490b3146101655780632862b2e214610195575b600080fd5b61011f600480360381019061011a9190611105565b610405565b60405161012c9190611154565b60405180910390f35b61014f600480360381019061014a919061116f565b610440565b60405161015c9190611154565b60405180910390f35b61017f600480360381019061017a919061119c565b610457565b60405161018c9190611154565b60405180910390f35b6101af60048036038101906101aa9190611105565b61057a565b6040516101bc9190611154565b60405180910390f35b6101df60048036038101906101da9190611203565b6105a2565b6040516101ec9190611154565b60405180910390f35b61020f600480360381019061020a91906112a5565b6106ec565b60405161021c9190611154565b60405180910390f35b61023f600480360381019061023a91906112f8565b61071c565b60405161024c9190611154565b60405180910390f35b61026f600480360381019061026a919061116f565b610778565b60405161027c9190611154565b60405180910390f35b61029f600480360381019061029a919061119c565b61078a565b6040516102ac9190611154565b60405180910390f35b6102cf60048036038101906102ca9190611105565b610875565b6040516102dc9190611154565b60405180910390f35b6102ff60048036038101906102fa919061119c565b61089f565b60405161030c9190611154565b60405180910390f35b61032f600480360381019061032a9190611105565b6108f0565b60405161033c9190611154565b60405180910390f35b61035f600480360381019061035a9190611105565b61090d565b60405161036c9190611154565b60405180910390f35b61038f600480360381019061038a91906112f8565b610937565b60405161039c9190611154565b60405180910390f35b6103bf60048036038101906103ba9190611105565b610a19565b6040516103cc9190611154565b60405180910390f35b6103ef60048036038101906103ea9190611105565b610a36565b6040516103fc9190611154565b60405180910390f35b60008061041a83670de0b6b3a76400006108f0565b90506104376104298286610a19565b678ac7230489e800006108f0565b91505092915050565b60008082905061044f81610a7f565b915050919050565b600082850361047b57670de0b6b3a76400008461047491906113a2565b9050610572565b828511156104fa5760006104a0610492878661090d565b671bc16d674ec8000061057a565b905060006104b66104b18386610875565b610778565b905060006104cd6104c7898861090d565b836108f0565b905060006104e382670de0b6b3a7640000610875565b90506104ef8189610a19565b945050505050610572565b8285101561057157600061051f610511858861090d565b671bc16d674ec8000061057a565b905060006105356105308386610875565b610778565b9050600061054c610546878a61090d565b836108f0565b9050600061055a8289610a19565b9050610566888261090d565b945050505050610572565b5b949350505050565b60008083905060008390506105988183610cdb90919063ffffffff16565b9250505092915050565b600081851061064857600061062b6105e1670de0b6b3a76400008a6105c791906113a2565b8b670de0b6b3a7640000896105dc91906113a2565b6106ec565b610626670de0b6b3a7640000896105f891906113a2565b8c670de0b6b3a76400008861060d91906113a2565b670de0b6b3a76400008a61062191906113a2565b61078a565b610875565b90506106408161063b898c610a36565b610875565b9150506106e1565b600061068d61067e670de0b6b3a76400008a61066491906113a2565b8b670de0b6b3a76400008961067991906113a2565b6106ec565b610688898c610a36565b610875565b90506106dd816106d8670de0b6b3a7640000896106aa91906113a2565b8c670de0b6b3a7640000886106bf91906113a2565b670de0b6b3a76400008a6106d391906113a2565b61078a565b61090d565b9150505b979650505050505050565b600061071361070d6107078468056bc75e2d631000006108f0565b8661057a565b84610a19565b90509392505050565b600061076d86610768670de0b6b3a76400008561073991906113a2565b670de0b6b3a76400008861074d91906113a2565b670de0b6b3a76400008861076191906113a2565b8a8c610937565b610875565b905095945050505050565b600061078382610d14565b9050919050565b600082850361079c576000905061086d565b828511156108045760006107c16107b3878661090d565b671bc16d674ec8000061057a565b905060006107d76107d28386610875565b610778565b905060006107ee6107e8898861090d565b836108f0565b90506107fa8188610a19565b935050505061086d565b8483111561086c57600061082961081b858861090d565b671bc16d674ec8000061057a565b9050600061083f61083a8386610875565b610778565b90506000610856610850878a61090d565b836108f0565b90506108628188610a19565b935050505061086d565b5b949350505050565b600061088a8284610d8a90919063ffffffff16565b90508281101561089957600080fd5b92915050565b60006108e682670de0b6b3a7640000876108b991906113a2565b670de0b6b3a7640000876108cd91906113a2565b670de0b6b3a7640000876108e191906113a2565b610457565b9050949350505050565b60006109058284610d9790919063ffffffff16565b905092915050565b60008282111561091c57600080fd5b61092f8284610ddc90919063ffffffff16565b905092915050565b6000838511156109a257600061094d868661090d565b9050600061095b88836108f0565b9050600061098c61097d61097784670de0b6b3a7640000610875565b88610a19565b683635c9adc5dea000006108f0565b90506109988186610a19565b9350505050610a10565b83851015610a0b5760006109b6858761090d565b905060006109c488836108f0565b905060006109f56109e66109e084670de0b6b3a7640000610875565b88610a19565b683635c9adc5dea000006108f0565b9050610a018186610a19565b9350505050610a10565b600090505b95945050505050565b6000610a2e8284610de990919063ffffffff16565b905092915050565b600080610a4b84670de0b6b3a76400006108f0565b9050610a5f81670de0b6b3a7640000610875565b9050610a6a81610440565b9150610a768284610a19565b91505092915050565b6000816fffffffffffffffffffffffffffffffff1060071b905081811c67ffffffffffffffff1060061b8117905081811c63ffffffff1060051b8117905081811c61ffff1060041b8117905081811c60ff1060031b8117905060008213610aee57631615e6386000526004601cfd5b7ff8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff6f8421084210842108cc6318c6db6d54be83831c1c601f161a8118905081811b609f1c91506c8c3f38e95a6b1ff2ab1c3b3437828384856c29508e458543d8aa4df2abee78010260601d6d0139601a2efabe717e604cbb4894010260601d6d02247f7a7b6594320649aa03aba1010260601d036d02384773bdf1ac5676facced609183820260601d0390506cb9a025d814b29c212b8b1a07ce83820260601d0390506c0a09507084cc699bb0e71ea86a60601b838202039050826c465772b2bbbb5f824b15207a300180840260601d6d0388eaa27412d5aca026815d636e01905080840260601d6d0df99ac502031bf953eff472fdcc01905080840260601d6d13cdffb29d51d99322bdff5f221101905080840260601d6d0a0f742023def783a307a986912e01905080840260601d6d01920d8043ca89b5239253284e4201905080840260601d6c0b7a86d7375468fac667a0a527019050808205915081711340daa0d5f769dba1915cef59f0815a55060291508183609f037d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b302019150817d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840191508160ae1d92505050919050565b6000610d0c670de0b6b3a764000083610cf386610a7f565b610cfd91906113ee565b610d079190611495565b610e1c565b905092915050565b6000633b9aca00905060016ec097ce7bc90715b34b9f10000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81610d5e57610d5d611466565b5b04038211610d7857670de0b6b3a764000082029150600190505b610d818261100c565b81029050919050565b6000818301905092915050565b6000670de0b6b3a7640000600019048311670de0b6b3a764000002158202610dc757637c5f487d6000526004601cfd5b81670de0b6b3a7640000840204905092915050565b6000818303905092915050565b600081600019048311820215610e075763bac65e5b6000526004601cfd5b670de0b6b3a764000082840204905092915050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdc0d0570925a462d782131561100757680755bf798b4a1bf1e58212610e645763a37bfec96000526004601cfd5b6503782dace9d9604e83901b81610e7e57610e7d611466565b5b059150600060606b8000000000000000000000006bb17217f7d1cf79abc9e3b398606086901b81610eb257610eb1611466565b5b0501901d90506bb17217f7d1cf79abc9e3b39881028303925060006c10fe68e7fd37d0007b713f7650840190506d02d16720577bd19bf614176fe9ea6060858302901d01905060006d04a4fd9f2a8b96949216d2255a6c8583010390506e0587f503bb6ea29d25fcb7401964506060838302901d01905079d835ebba824c98fb31b83b2ca45c00000000000000000000000085820201905060006c240c330e9fb2d9cbaf0fd5aafc860390506d0277594991cfc85f6e2461837cd96060878302901d0190506d1a521255e34f6a5061b25ef1c9c46060878302901d0390506db1bbb201f443cf962f1a1d3db4a56060878302901d0190506e02c72388d9f74f51a9331fed693f156060878302901d0390506e05180bb14799ab47a8a8cb2a527d576060878302901d01905080820594508360c30374029d9dc38563c32e5c2f6dc192ee70ef65f9978af38602901c9450505050505b919050565b600060b590508170ffffffffffffffffffffffffffffffffff1060071b82811c68ffffffffffffffffff1060061b8117905082811c64ffffffffff1060051b8117905082811c62ffffff1060041b81179050818160011c1b91506201000083821c01820260121c9150818304820160011c9150818304820160011c9150818304820160011c9150818304820160011c9150818304820160011c9150818304820160011c9150818304820160011c915081828404108203915050919050565b600080fd5b6000819050919050565b6110e2816110cf565b81146110ed57600080fd5b50565b6000813590506110ff816110d9565b92915050565b6000806040838503121561111c5761111b6110ca565b5b600061112a858286016110f0565b925050602061113b858286016110f0565b9150509250929050565b61114e816110cf565b82525050565b60006020820190506111696000830184611145565b92915050565b600060208284031215611185576111846110ca565b5b6000611193848285016110f0565b91505092915050565b600080600080608085870312156111b6576111b56110ca565b5b60006111c4878288016110f0565b94505060206111d5878288016110f0565b93505060406111e6878288016110f0565b92505060606111f7878288016110f0565b91505092959194509250565b600080600080600080600060e0888a031215611222576112216110ca565b5b60006112308a828b016110f0565b97505060206112418a828b016110f0565b96505060406112528a828b016110f0565b95505060606112638a828b016110f0565b94505060806112748a828b016110f0565b93505060a06112858a828b016110f0565b92505060c06112968a828b016110f0565b91505092959891949750929550565b6000806000606084860312156112be576112bd6110ca565b5b60006112cc868287016110f0565b93505060206112dd868287016110f0565b92505060406112ee868287016110f0565b9150509250925092565b600080600080600060a08688031215611314576113136110ca565b5b6000611322888289016110f0565b9550506020611333888289016110f0565b9450506040611344888289016110f0565b9350506060611355888289016110f0565b9250506080611366888289016110f0565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113ad826110cf565b91506113b8836110cf565b92508282026113c6816110cf565b915082820484148315176113dd576113dc611373565b5b5092915050565b6000819050919050565b60006113f9826113e4565b9150611404836113e4565b9250828202611412816113e4565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561144a57611449611373565b5b828205841483151761145f5761145e611373565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114a0826113e4565b91506114ab836113e4565b9250826114bb576114ba611466565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156114f4576114f3611373565b5b82820590509291505056fea26469706673582212203314f3efac1e6766abe09de9c84200e701acee6a9ba14a36f7094b598cefdc6364736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c806388b62b6a116100a0578063ce4580c911610064578063ce4580c914610477578063db582783146104b4578063eacbdb34146104f1578063f881f0001461051a578063fb1a1790146105365761011f565b806388b62b6a146103525780639a7ff3f21461038f5780639f40f362146103b8578063bba97d76146103f5578063cc6c41e6146104325761011f565b806359fa878e116100e757806359fa878e1461024757806363abd5cf146102845780637a0039ba146102ad5780637fd67647146102ea5780638042659e146103155761011f565b806312f524e01461012457806316415a02146101615780633d1c1c53146101a45780634c5d2c8b146101cd578063561cf7f51461020a575b600080fd5b34801561013057600080fd5b5061014b600480360381019061014691906135bf565b610561565b604051610158919061360e565b60405180910390f35b34801561016d57600080fd5b5061018860048036038101906101839190613629565b6106f4565b60405161019b9796959493929190613710565b60405180910390f35b3480156101b057600080fd5b506101cb60048036038101906101c691906138bb565b6107eb565b005b3480156101d957600080fd5b506101f460048036038101906101ef91906135bf565b610b13565b604051610201919061360e565b60405180910390f35b34801561021657600080fd5b50610231600480360381019061022c9190613629565b610d14565b60405161023e919061360e565b60405180910390f35b34801561025357600080fd5b5061026e60048036038101906102699190613629565b610def565b60405161027b919061360e565b60405180910390f35b34801561029057600080fd5b506102ab60048036038101906102a69190613917565b610eca565b005b3480156102b957600080fd5b506102d460048036038101906102cf91906135bf565b611a1a565b6040516102e19190613957565b60405180910390f35b3480156102f657600080fd5b506102ff611bba565b60405161030c919061360e565b60405180910390f35b34801561032157600080fd5b5061033c60048036038101906103379190613629565b611bc4565b6040516103499190613972565b60405180910390f35b34801561035e57600080fd5b5061037960048036038101906103749190613629565b611d27565b604051610386919061360e565b60405180910390f35b34801561039b57600080fd5b506103b660048036038101906103b19190613994565b611e02565b005b3480156103c457600080fd5b506103df60048036038101906103da91906135bf565b61202a565b6040516103ec9190613972565b60405180910390f35b34801561040157600080fd5b5061041c60048036038101906104179190613629565b612245565b6040516104299190613972565b60405180910390f35b34801561043e57600080fd5b5061045960048036038101906104549190613629565b612319565b60405161046e999897969594939291906139dd565b60405180910390f35b34801561048357600080fd5b5061049e600480360381019061049991906135bf565b61241c565b6040516104ab919061360e565b60405180910390f35b3480156104c057600080fd5b506104db60048036038101906104d691906135bf565b6125af565b6040516104e8919061360e565b60405180910390f35b3480156104fd57600080fd5b5061051860048036038101906105139190613994565b612742565b005b610534600480360381019061052f9190613a71565b61294c565b005b34801561054257600080fd5b5061054b613005565b604051610558919061360e565b60405180910390f35b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166105f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e990613b23565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060050160009054906101000a900460ff16610695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068c90613bb5565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060030154905092915050565b60046020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461073d90613c04565b80601f016020809104026020016040519081016040528092919081815260200182805461076990613c04565b80156107b65780601f1061078b576101008083540402835291602001916107b6565b820191906000526020600020905b81548152906001019060200180831161079957829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff16908060050154908060060154908060070154905087565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1661087a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087190613ca7565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600401600083600501600081546108d690613cf6565b91905081905581526020019081526020016000209050816005015481600001819055508381600101908161090a9190613eea565b50338160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508281600301819055506000816004018190555060008160070181905550670de0b6b3a7640000816008018190555060018160050160006101000a81548160ff021916908315150217905550808260040160008460050154815260200190815260200160002060008201548160000155600182018160010190816109d19190613fd2565b506002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060038201548160030155600482015481600401556005820160009054906101000a900460ff168160050160006101000a81548160ff0219169083151502179055506006820154816006015560078201548160070155600882015481600801559050507f827f91e7f4fbb905bd650f742c7af7b1b989f3eb56bb80e8faf09038583b72ef81600101826003015483600001548460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660020154604051610b0595949392919061413e565b60405180910390a150505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610ba4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9b9061420a565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160159054906101000a900460ff16610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e9061429c565b60405180910390fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600084815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050809250505092915050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610da5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9c90613b23565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610e80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e779061420a565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201549050919050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16610f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5090614308565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600082815260200190815260200160002060040160159054906101000a900460ff16610ffc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff39061439a565b60405180910390fd5b60001515600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160149054906101000a900460ff161515146110a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109d9061442c565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008481526020019081526020016000206003015490506000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008381526020019081526020016000206003015490506000603c600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007015442611229919061444c565b61123391906144af565b9050600080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005015490505b6001811061146e578573ffffffffffffffffffffffffffffffffffffffff16600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600089815260200190815260200160002060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614801561138c575084600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600089815260200190815260200160002060030154145b80156113f85750600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600088815260200190815260200160002060040160149054906101000a900460ff165b1561145b57600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600088815260200190815260200160002060020154915061146e565b8080611466906144e0565b91505061127e565b506000810361149f577f000000000000000000000000000000000000000000000000000000000000000090506114ba565b603c81426114ad919061444c565b6114b791906144af565b90505b611508600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206009015483858461300e565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090181905550611599600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060090154613145565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600801819055506116d9600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060080154600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008015489600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600089815260200190815260200160002060070154613250565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060080181905550611792600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060080154613320565b600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600086815260200190815260200160002060070181905550600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000858152602001908152602001600020600601600081548092919061185390613cf6565b91905055506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600088815260200190815260200160002060040160146101000a81548160ff02191690831515021790555042600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000888152602001908152602001600020600201819055507fc8eace918d73b100093f09590ebd3bd2e45fcbe6f7faf08b0a90855ea61edf858486338a42600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008b815260200190815260200160002060070154600460008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008c815260200190815260200160002060060154604051611a099796959493929190614509565b60405180910390a150505050505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa29061420a565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160159054906101000a900460ff16611b4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b459061429c565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160149054906101000a900460ff16905092915050565b6000600154905090565b6060600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4c90613b23565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054611ca290613c04565b80601f0160208091040260200160405190810160405280929190818152602001828054611cce90613c04565b8015611d1b5780601f10611cf057610100808354040283529160200191611d1b565b820191906000526020600020905b815481529060010190602001808311611cfe57829003601f168201915b50505050509050919050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16611db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daf90613b23565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501549050919050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff1615611e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e89906145ea565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081816001019081611f299190613eea565b506000808154611f3890613cf6565b919050819055816002018190555060018160030160006101000a81548160ff0219169083151502179055506000816005018190555060008160060181905550600081600701819055507f2daf7e02bff4313b1e326e8f126cffd3ff7c437229109ce78a53951ac8d70638816001018260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168360020154604051611fdf9392919061460a565b60405180910390a16120266040518060400160405280601281526020017f53656c6c657220437265617465642061743a00000000000000000000000000008152503361342b565b5050565b6060600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166120bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b290613b23565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060050160009054906101000a900460ff1661215e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612155906146ba565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060010180546121bf90613c04565b80601f01602080910402602001604051908101604052809291908181526020018280546121eb90613c04565b80156122385780601f1061220d57610100808354040283529160200191612238565b820191906000526020600020905b81548152906001019060200180831161221b57829003601f168201915b5050505050905092915050565b6060600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805461229490613c04565b80601f01602080910402602001604051908101604052809291908181526020018280546122c090613c04565b801561230d5780601f106122e25761010080835404028352916020019161230d565b820191906000526020600020905b8154815290600101906020018083116122f057829003601f168201915b50505050509050919050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101805461236290613c04565b80601f016020809104026020016040519081016040528092919081815260200182805461238e90613c04565b80156123db5780601f106123b0576101008083540402835291602001916123db565b820191906000526020600020905b8154815290600101906020018083116123be57829003601f168201915b5050505050908060020154908060030160009054906101000a900460ff16908060050154908060060154908060070154908060080154908060090154905089565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166124ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a49061420a565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060040160159054906101000a900460ff16612550576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125479061429c565b60405180910390fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060030154905092915050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16612640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263790613b23565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060050160009054906101000a900460ff166126e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126da906146ba565b60405180910390fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060070154905092915050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff16156127d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127c99061474c565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160010190816128699190613eea565b5060016000815461287990613cf6565b919050819055816002018190555060018160030160006101000a81548160ff0219169083151502179055506000816006018190555060008160050181905550670de0b6b3a76400008160090181905550600081600801819055504281600701819055507f72d8d6c2563f662f27728e50439bc8ace9286edca723199ecc8b1e68b5f3c16a816001018260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683600201548460080154604051612940949392919061476c565b60405180910390a15050565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160009054906101000a900460ff166129db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d290614308565b60405180910390fd5b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600083815260200190815260200160002060050160009054906101000a900460ff16612a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7590614804565b60405180910390fd5b600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000838152602001908152602001600020600301543414612b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b0d90614896565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff1634604051612b3c906148e7565b60006040518083038185875af1925050503d8060008114612b79576040519150601f19603f3d011682016040523d82523d6000602084013e612b7e565b606091505b5050905080612bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bb990614948565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160008154612c1390613cf6565b91905081905590506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008381526020019081526020016000209050818160000181905550428160010181905550848160030181905550838160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008160040160146101000a81548160ff02191690831515021790555060018160040160156101000a81548160ff02191690831515021790555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004016000848152602001908152602001600020600082015481600001556001820154816001015560028201548160020155600382015481600301556004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004820160149054906101000a900460ff168160040160146101000a81548160ff0219169083151502179055506004820160159054906101000a900460ff168160040160156101000a81548160ff021916908315150217905550905050600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008681526020019081526020016000206004016000815480929190612eb190613cf6565b919050555034600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006016000828254612f089190614968565b925050819055506001600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007016000828254612f629190614968565b925050819055507f2a87cec993d23d666d1bf9abb68302d6a2d20ba6a5287439294d1050d92f094282868633600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160008b815260200190815260200160002060030154604051612ff695949392919061499c565b60405180910390a15050505050565b60008054905090565b60006101808411156130235760109350613033565b60188461303091906144af565b93505b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339288c9b868686867f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518863ffffffff1660e01b81526004016130fa97969594939291906149ef565b602060405180830381865afa158015613117573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313b9190614a73565b9050949350505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397d67bff7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000866040518563ffffffff1660e01b81526004016132089493929190614aa0565b602060405180830381865afa158015613225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132499190614a73565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348590bf1868686867f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016132d5959493929190614ae5565b602060405180830381865afa1580156132f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133169190614a73565b9050949350505050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166397d67bff7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000866040518563ffffffff1660e01b81526004016133e39493929190614aa0565b602060405180830381865afa158015613400573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134249190614a73565b9050919050565b6134c38282604051602401613441929190614b38565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506134c7565b5050565b6134de816134d66134e1613502565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b61350d819050919050565b613515614b68565b565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006135568261352b565b9050919050565b6135668161354b565b811461357157600080fd5b50565b6000813590506135838161355d565b92915050565b6000819050919050565b61359c81613589565b81146135a757600080fd5b50565b6000813590506135b981613593565b92915050565b600080604083850312156135d6576135d5613521565b5b60006135e485828601613574565b92505060206135f5858286016135aa565b9150509250929050565b61360881613589565b82525050565b600060208201905061362360008301846135ff565b92915050565b60006020828403121561363f5761363e613521565b5b600061364d84828501613574565b91505092915050565b61365f8161354b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561369f578082015181840152602081019050613684565b60008484015250505050565b6000601f19601f8301169050919050565b60006136c782613665565b6136d18185613670565b93506136e1818560208601613681565b6136ea816136ab565b840191505092915050565b60008115159050919050565b61370a816136f5565b82525050565b600060e082019050613725600083018a613656565b818103602083015261373781896136bc565b905061374660408301886135ff565b6137536060830187613701565b61376060808301866135ff565b61376d60a08301856135ff565b61377a60c08301846135ff565b98975050505050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6137c8826136ab565b810181811067ffffffffffffffff821117156137e7576137e6613790565b5b80604052505050565b60006137fa613517565b905061380682826137bf565b919050565b600067ffffffffffffffff82111561382657613825613790565b5b61382f826136ab565b9050602081019050919050565b82818337600083830152505050565b600061385e6138598461380b565b6137f0565b90508281526020810184848401111561387a5761387961378b565b5b61388584828561383c565b509392505050565b600082601f8301126138a2576138a1613786565b5b81356138b284826020860161384b565b91505092915050565b600080604083850312156138d2576138d1613521565b5b600083013567ffffffffffffffff8111156138f0576138ef613526565b5b6138fc8582860161388d565b925050602061390d858286016135aa565b9150509250929050565b6000806040838503121561392e5761392d613521565b5b600061393c858286016135aa565b925050602061394d858286016135aa565b9150509250929050565b600060208201905061396c6000830184613701565b92915050565b6000602082019050818103600083015261398c81846136bc565b905092915050565b6000602082840312156139aa576139a9613521565b5b600082013567ffffffffffffffff8111156139c8576139c7613526565b5b6139d48482850161388d565b91505092915050565b6000610120820190506139f3600083018c613656565b8181036020830152613a05818b6136bc565b9050613a14604083018a6135ff565b613a216060830189613701565b613a2e60808301886135ff565b613a3b60a08301876135ff565b613a4860c08301866135ff565b613a5560e08301856135ff565b613a636101008301846135ff565b9a9950505050505050505050565b60008060408385031215613a8857613a87613521565b5b6000613a96858286016135aa565b9250506020613aa785828601613574565b9150509250929050565b7f53656c6c6572207769746820746869732077616c6c657420646f6573206e6f7460008201527f2065786973747321200000000000000000000000000000000000000000000000602082015250565b6000613b0d602983613670565b9150613b1882613ab1565b604082019050919050565b60006020820190508181036000830152613b3c81613b00565b9050919050565b7f53656c6c6572207769746820746869732070726f6475637420646f6573206e6f60008201527f7420657869737473212000000000000000000000000000000000000000000000602082015250565b6000613b9f602a83613670565b9150613baa82613b43565b604082019050919050565b60006020820190508181036000830152613bce81613b92565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613c1c57607f821691505b602082108103613c2f57613c2e613bd5565b5b50919050565b7f53656c6c6572207769746820746869732077616c6c657420646f6573206e6f7460008201527f2065786973747321000000000000000000000000000000000000000000000000602082015250565b6000613c91602883613670565b9150613c9c82613c35565b604082019050919050565b60006020820190508181036000830152613cc081613c84565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d0182613589565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613d3357613d32613cc7565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613da07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613d63565b613daa8683613d63565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613de7613de2613ddd84613589565b613dc2565b613589565b9050919050565b6000819050919050565b613e0183613dcc565b613e15613e0d82613dee565b848454613d70565b825550505050565b600090565b613e2a613e1d565b613e35818484613df8565b505050565b5b81811015613e5957613e4e600082613e22565b600181019050613e3b565b5050565b601f821115613e9e57613e6f81613d3e565b613e7884613d53565b81016020851015613e87578190505b613e9b613e9385613d53565b830182613e3a565b50505b505050565b600082821c905092915050565b6000613ec160001984600802613ea3565b1980831691505092915050565b6000613eda8383613eb0565b9150826002028217905092915050565b613ef382613665565b67ffffffffffffffff811115613f0c57613f0b613790565b5b613f168254613c04565b613f21828285613e5d565b600060209050601f831160018114613f545760008415613f42578287015190505b613f4c8582613ece565b865550613fb4565b601f198416613f6286613d3e565b60005b82811015613f8a57848901518255600182019150602085019450602081019050613f65565b86831015613fa75784890151613fa3601f891682613eb0565b8355505b6001600288020188555050505b505050505050565b600081549050613fcb81613c04565b9050919050565b818103613fe05750506140b8565b613fe982613fbc565b67ffffffffffffffff81111561400257614001613790565b5b61400c8254613c04565b614017828285613e5d565b6000601f8311600181146140465760008415614034578287015490505b61403e8582613ece565b8655506140b1565b601f19841661405487613d3e565b965061405f86613d3e565b60005b8281101561408757848901548255600182019150600185019450602081019050614062565b868310156140a457848901546140a0601f891682613eb0565b8355505b6001600288020188555050505b5050505050505b565b600081546140c781613c04565b6140d18186613670565b945060018216600081146140ec576001811461410257614135565b60ff198316865281151560200286019350614135565b61410b85613d3e565b60005b8381101561412d5781548189015260018201915060208101905061410e565b808801955050505b50505092915050565b600060a082019050818103600083015261415881886140ba565b905061416760208301876135ff565b61417460408301866135ff565b6141816060830185613656565b61418e60808301846135ff565b9695505050505050565b7f4275796572207769746820746869732077616c6c657420646f6573206e6f742060008201527f6578697374732120000000000000000000000000000000000000000000000000602082015250565b60006141f4602883613670565b91506141ff82614198565b604082019050919050565b60006020820190508181036000830152614223816141e7565b9050919050565b7f54786e20494420696e207468652073656c6c657220646f6573206e6f7420657860008201527f6973747321200000000000000000000000000000000000000000000000000000602082015250565b6000614286602683613670565b91506142918261422a565b604082019050919050565b600060208201905081810360008301526142b581614279565b9050919050565b7f5468697320627579657220646f6573206e6f7420657869737421000000000000600082015250565b60006142f2601a83613670565b91506142fd826142bc565b602082019050919050565b60006020820190508181036000830152614321816142e5565b9050919050565b7f427579657220646f6573206e6f7420686176652074686973207472616e73616360008201527f74696f6e20494421000000000000000000000000000000000000000000000000602082015250565b6000614384602883613670565b915061438f82614328565b604082019050919050565b600060208201905081810360008301526143b381614377565b9050919050565b7f427579657220616c72656164792072657669657765642074686973207472616e60008201527f73616374696f6e20494421000000000000000000000000000000000000000000602082015250565b6000614416602b83613670565b9150614421826143ba565b604082019050919050565b6000602082019050818103600083015261444581614409565b9050919050565b600061445782613589565b915061446283613589565b925082820390508181111561447a57614479613cc7565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006144ba82613589565b91506144c583613589565b9250826144d5576144d4614480565b5b828204905092915050565b60006144eb82613589565b9150600082036144fe576144fd613cc7565b5b600182039050919050565b600060e08201905061451e600083018a6135ff565b61452b6020830189613656565b6145386040830188613656565b61454560608301876135ff565b61455260808301866135ff565b61455f60a08301856135ff565b61456c60c08301846135ff565b98975050505050505050565b7f53656c6c6572207769746820746869732077616c6c657420616c72656164792060008201527f6578697374732100000000000000000000000000000000000000000000000000602082015250565b60006145d4602783613670565b91506145df82614578565b604082019050919050565b60006020820190508181036000830152614603816145c7565b9050919050565b6000606082019050818103600083015261462481866140ba565b90506146336020830185613656565b61464060408301846135ff565b949350505050565b7f50726f64756374494420696e207468652073656c6c657220646f6573206e6f7460008201527f2065786973747321200000000000000000000000000000000000000000000000602082015250565b60006146a4602983613670565b91506146af82614648565b604082019050919050565b600060208201905081810360008301526146d381614697565b9050919050565b7f4275796572207769746820746869732077616c6c657420616c7265616479206560008201527f7869737473210000000000000000000000000000000000000000000000000000602082015250565b6000614736602683613670565b9150614741826146da565b604082019050919050565b6000602082019050818103600083015261476581614729565b9050919050565b6000608082019050818103600083015261478681876140ba565b90506147956020830186613656565b6147a260408301856135ff565b6147af60608301846135ff565b95945050505050565b7f5468652050726f6475637420646f6573206e6f74206578697374210000000000600082015250565b60006147ee601b83613670565b91506147f9826147b8565b602082019050919050565b6000602082019050818103600083015261481d816147e1565b9050919050565b7f457468657273206e6f7420656e6f7567682f746f6f206d75636820746f20627560008201527f79207468652070726f6475637421000000000000000000000000000000000000602082015250565b6000614880602e83613670565b915061488b82614824565b604082019050919050565b600060208201905081810360008301526148af81614873565b9050919050565b600081905092915050565b50565b60006148d16000836148b6565b91506148dc826148c1565b600082019050919050565b60006148f2826148c4565b9150819050919050565b7f4661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000614932601483613670565b915061493d826148fc565b602082019050919050565b6000602082019050818103600083015261496181614925565b9050919050565b600061497382613589565b915061497e83613589565b925082820190508082111561499657614995613cc7565b5b92915050565b600060a0820190506149b160008301886135ff565b6149be60208301876135ff565b6149cb6040830186613656565b6149d86060830185613656565b6149e560808301846135ff565b9695505050505050565b600060e082019050614a04600083018a6135ff565b614a1160208301896135ff565b614a1e60408301886135ff565b614a2b60608301876135ff565b614a3860808301866135ff565b614a4560a08301856135ff565b614a5260c08301846135ff565b98975050505050505050565b600081519050614a6d81613593565b92915050565b600060208284031215614a8957614a88613521565b5b6000614a9784828501614a5e565b91505092915050565b6000608082019050614ab560008301876135ff565b614ac260208301866135ff565b614acf60408301856135ff565b614adc60608301846135ff565b95945050505050565b600060a082019050614afa60008301886135ff565b614b0760208301876135ff565b614b1460408301866135ff565b614b2160608301856135ff565b614b2e60808301846135ff565b9695505050505050565b60006040820190508181036000830152614b5281856136bc565b9050614b616020830184613656565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220f9961f918d3bfc956e32cde97b635f1eb5f28e0f0ab4ce749739efe9c5a37f5864736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 922,
        "contract": "Contracts/Store.sol:Store",
        "label": "totalSellers",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 925,
        "contract": "Contracts/Store.sol:Store",
        "label": "totalBuyers",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 958,
        "contract": "Contracts/Store.sol:Store",
        "label": "MathLib",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(Math)915"
      },
      {
        "astId": 960,
        "contract": "Contracts/Store.sol:Store",
        "label": "MathLibAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1043,
        "contract": "Contracts/Store.sol:Store",
        "label": "sellersList",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(Seller)1014_storage)"
      },
      {
        "astId": 1048,
        "contract": "Contracts/Store.sol:Store",
        "label": "buyersList",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(Buyer)1038_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Math)915": {
        "encoding": "inplace",
        "label": "contract Math",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Buyer)1038_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Store.Buyer)",
        "numberOfBytes": "32",
        "value": "t_struct(Buyer)1038_storage"
      },
      "t_mapping(t_address,t_struct(Seller)1014_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Store.Seller)",
        "numberOfBytes": "32",
        "value": "t_struct(Seller)1014_storage"
      },
      "t_mapping(t_uint256,t_struct(Product)979_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Store.Product)",
        "numberOfBytes": "32",
        "value": "t_struct(Product)979_storage"
      },
      "t_mapping(t_uint256,t_struct(Transaction)994_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Store.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)994_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Buyer)1038_storage": {
        "encoding": "inplace",
        "label": "struct Store.Buyer",
        "members": [
          {
            "astId": 1016,
            "contract": "Contracts/Store.sol:Store",
            "label": "buyerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1018,
            "contract": "Contracts/Store.sol:Store",
            "label": "buyerName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1020,
            "contract": "Contracts/Store.sol:Store",
            "label": "buyerID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1022,
            "contract": "Contracts/Store.sol:Store",
            "label": "isExist",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1027,
            "contract": "Contracts/Store.sol:Store",
            "label": "txnMade",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Transaction)994_storage)"
          },
          {
            "astId": 1029,
            "contract": "Contracts/Store.sol:Store",
            "label": "numOfTxn",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1031,
            "contract": "Contracts/Store.sol:Store",
            "label": "numOfReviewsGiven",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1033,
            "contract": "Contracts/Store.sol:Store",
            "label": "lastReviewTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1035,
            "contract": "Contracts/Store.sol:Store",
            "label": "repScore",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1037,
            "contract": "Contracts/Store.sol:Store",
            "label": "X_Value",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(Product)979_storage": {
        "encoding": "inplace",
        "label": "struct Store.Product",
        "members": [
          {
            "astId": 962,
            "contract": "Contracts/Store.sol:Store",
            "label": "productID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 964,
            "contract": "Contracts/Store.sol:Store",
            "label": "productName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 966,
            "contract": "Contracts/Store.sol:Store",
            "label": "sellerAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 968,
            "contract": "Contracts/Store.sol:Store",
            "label": "productPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 970,
            "contract": "Contracts/Store.sol:Store",
            "label": "totalSold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 972,
            "contract": "Contracts/Store.sol:Store",
            "label": "isExist",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 974,
            "contract": "Contracts/Store.sol:Store",
            "label": "numOfReviewsGiven",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 976,
            "contract": "Contracts/Store.sol:Store",
            "label": "review",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 978,
            "contract": "Contracts/Store.sol:Store",
            "label": "X_Value",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Seller)1014_storage": {
        "encoding": "inplace",
        "label": "struct Store.Seller",
        "members": [
          {
            "astId": 996,
            "contract": "Contracts/Store.sol:Store",
            "label": "sellerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 998,
            "contract": "Contracts/Store.sol:Store",
            "label": "sellerName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1000,
            "contract": "Contracts/Store.sol:Store",
            "label": "sellerID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1002,
            "contract": "Contracts/Store.sol:Store",
            "label": "isExist",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 1007,
            "contract": "Contracts/Store.sol:Store",
            "label": "sellerProducts",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(Product)979_storage)"
          },
          {
            "astId": 1009,
            "contract": "Contracts/Store.sol:Store",
            "label": "totalProducts",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1011,
            "contract": "Contracts/Store.sol:Store",
            "label": "totalRevenue",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1013,
            "contract": "Contracts/Store.sol:Store",
            "label": "numOfSales",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Transaction)994_storage": {
        "encoding": "inplace",
        "label": "struct Store.Transaction",
        "members": [
          {
            "astId": 981,
            "contract": "Contracts/Store.sol:Store",
            "label": "txnID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 983,
            "contract": "Contracts/Store.sol:Store",
            "label": "timeStampBought",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 985,
            "contract": "Contracts/Store.sol:Store",
            "label": "timeStampReviewed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 987,
            "contract": "Contracts/Store.sol:Store",
            "label": "purchasedProductID",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 989,
            "contract": "Contracts/Store.sol:Store",
            "label": "sellerAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 991,
            "contract": "Contracts/Store.sol:Store",
            "label": "reviewed",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 993,
            "contract": "Contracts/Store.sol:Store",
            "label": "isExist",
            "offset": 21,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}